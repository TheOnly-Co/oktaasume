apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/limit-ranger: 'LimitRanger plugin set: cpu request for container
        carts-1'
    creationTimestamp: "2021-01-21T05:23:57Z"
    generateName: carts-6f9f47c568-
    labels:
      app: carts
      pod-template-hash: 6f9f47c568
    name: carts-6f9f47c568-5xsdm
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: carts-6f9f47c568
      uid: 186d368c-ab08-4496-9299-0a3123e7453e
    resourceVersion: "94330"
    selfLink: /api/v1/namespaces/default/pods/carts-6f9f47c568-5xsdm
    uid: 63c1a655-5fb3-4c26-964c-d69eaabcf90b
  spec:
    containers:
    - image: gouravshah/carts:latest
      imagePullPolicy: Always
      name: carts-1
      resources:
        requests:
          cpu: 100m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-tzq2n
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-tzq2n
      secret:
        defaultMode: 420
        secretName: default-token-tzq2n
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:23:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:24:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:24:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:23:57Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1ca4cc1ee80ffea719d749c7135eb9886d1fb3a6791320ef82c8bd767f0c257a
      image: gouravshah/carts:latest
      imageID: docker-pullable://gouravshah/carts@sha256:751ae014aabca765c9b2fea9a6010e4f0bd6bd0d753ea47ddb98764f0acfa453
      lastState: {}
      name: carts-1
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T05:24:04Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.108.0.12
    podIPs:
    - ip: 10.108.0.12
    qosClass: Burstable
    startTime: "2021-01-21T05:23:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/limit-ranger: 'LimitRanger plugin set: cpu request for container
        catalogue-1'
    creationTimestamp: "2021-01-21T05:11:30Z"
    generateName: catalogue-798b98f89d-
    labels:
      app: catalogue
      pod-template-hash: 798b98f89d
    name: catalogue-798b98f89d-rg9tq
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: catalogue-798b98f89d
      uid: a4a5f090-1258-4efa-9dc4-70aa9e568ec7
    resourceVersion: "90692"
    selfLink: /api/v1/namespaces/default/pods/catalogue-798b98f89d-rg9tq
    uid: 37d24ade-e8c5-4cc2-8b6d-deb09fb4d404
  spec:
    containers:
    - image: gouravshah/catalogue:latest
      imagePullPolicy: Always
      name: catalogue-1
      resources:
        requests:
          cpu: 100m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-tzq2n
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-tzq2n
      secret:
        defaultMode: 420
        secretName: default-token-tzq2n
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:11:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:11:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:11:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:11:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a91cc55f2198891a8058a469ebbf1d8baabde39698acb346997b827b94bb14e9
      image: gouravshah/catalogue:latest
      imageID: docker-pullable://gouravshah/catalogue@sha256:37e9740e641b8998712b88e37ce673406bbb49ba018b5c23554395c644a21197
      lastState: {}
      name: catalogue-1
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T05:11:53Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.16
    podIPs:
    - ip: 10.108.2.16
    qosClass: Burstable
    startTime: "2021-01-21T05:11:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/limit-ranger: 'LimitRanger plugin set: cpu request for container
        catalogue-db-1'
    creationTimestamp: "2021-01-21T05:08:28Z"
    generateName: catalogue-db-57795744-
    labels:
      app: catalogue-db
      pod-template-hash: "57795744"
    name: catalogue-db-57795744-f96wc
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: catalogue-db-57795744
      uid: 147c7b6d-612c-4dfd-a168-1aec7d4eebc4
    resourceVersion: "89729"
    selfLink: /api/v1/namespaces/default/pods/catalogue-db-57795744-f96wc
    uid: 2bf03e0e-7453-4bac-9b79-4f9ae38ea2bd
  spec:
    containers:
    - env:
      - name: MYSQL_ALLOW_EMPTY_PASSWORD
        valueFrom:
          configMapKeyRef:
            key: MYSQL_ALLOW_EMPTY_PASSWORD
            name: catalogue-db-config-6zx1
      - name: MYSQL_DATABASE
        valueFrom:
          configMapKeyRef:
            key: MYSQL_DATABASE
            name: catalogue-db-config-6zx1
      image: gouravshah/catalogue-db:latest
      imagePullPolicy: Always
      name: catalogue-db-1
      resources:
        requests:
          cpu: 100m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-tzq2n
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-tzq2n
      secret:
        defaultMode: 420
        secretName: default-token-tzq2n
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:08:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:08:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:08:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:08:28Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://68a39e0c229a96eaa2549f91f81f54a40fd743281f547ba6c551206bd54041cf
      image: gouravshah/catalogue-db:latest
      imageID: docker-pullable://gouravshah/catalogue-db@sha256:ed0dd53aa3e0a11c60ecdcafb70313dfb81168406eeb0103054272903fc06c70
      lastState: {}
      name: catalogue-db-1
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T05:08:39Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.108.0.10
    podIPs:
    - ip: 10.108.0.10
    qosClass: Burstable
    startTime: "2021-01-21T05:08:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/limit-ranger: 'LimitRanger plugin set: cpu request for container
        frontend-1'
    creationTimestamp: "2021-01-21T05:45:07Z"
    generateName: frontend-66d7fddc89-
    labels:
      app: frontend
      pod-template-hash: 66d7fddc89
    name: frontend-66d7fddc89-9s4xw
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: frontend-66d7fddc89
      uid: b1593686-3b58-4b13-a7ee-a555405a3148
    resourceVersion: "100784"
    selfLink: /api/v1/namespaces/default/pods/frontend-66d7fddc89-9s4xw
    uid: b0dd202e-9fd7-48a0-b19d-afa20fef0db9
  spec:
    containers:
    - image: schoolofdevops/frontend:v3.0
      imagePullPolicy: Always
      name: frontend-1
      resources:
        requests:
          cpu: 100m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-tzq2n
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-tzq2n
      secret:
        defaultMode: 420
        secretName: default-token-tzq2n
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:45:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:45:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:45:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T05:45:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d31f8cd0512cabacf9c11b227805397f23214833d3709def39c5cb9988d2b035
      image: schoolofdevops/frontend:v3.0
      imageID: docker-pullable://schoolofdevops/frontend@sha256:ad2596d977369ab84dfb973b23e0e08faa759f62b7719d5d710557a47a724555
      lastState: {}
      name: frontend-1
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T05:45:20Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.23
    podIPs:
    - ip: 10.108.2.23
    qosClass: Burstable
    startTime: "2021-01-21T05:45:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-09T21:44:30Z"
    generateName: hello-world-77b74d7cc8-
    labels:
      pod-template-hash: 77b74d7cc8
      run: load-balancer-example
    name: hello-world-77b74d7cc8-ksphf
    namespace: helloworld
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: hello-world-77b74d7cc8
      uid: 91b1d1ef-f9c9-4779-9be1-7e895f0d14ae
    resourceVersion: "8391898"
    selfLink: /api/v1/namespaces/helloworld/pods/hello-world-77b74d7cc8-ksphf
    uid: 40cff98e-b713-4ea9-a519-31550c0f8dc2
  spec:
    containers:
    - image: gcr.io/google-samples/node-hello:1.0
      imagePullPolicy: IfNotPresent
      name: hello-world
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-dnrmh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-dnrmh
      secret:
        defaultMode: 420
        secretName: default-token-dnrmh
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-02-09T21:44:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-02-09T21:44:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-02-09T21:44:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-02-09T21:44:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://97ac3beb5ae6ea110269e80a4f2b69be0ef9107cb2d1223e2de115865aa65597
      image: gcr.io/google-samples/node-hello:1.0
      imageID: docker-pullable://gcr.io/google-samples/node-hello@sha256:d238d0ab54efb76ec0f7b1da666cefa9b40be59ef34346a761b8adc2dd45459b
      lastState: {}
      name: hello-world
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-02-09T21:44:31Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.108.1.30
    podIPs:
    - ip: 10.108.1.30
    qosClass: BestEffort
    startTime: "2021-02-09T21:44:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-02-09T21:44:30Z"
    generateName: hello-world-77b74d7cc8-
    labels:
      pod-template-hash: 77b74d7cc8
      run: load-balancer-example
    name: hello-world-77b74d7cc8-mqc5s
    namespace: helloworld
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: hello-world-77b74d7cc8
      uid: 91b1d1ef-f9c9-4779-9be1-7e895f0d14ae
    resourceVersion: "8392005"
    selfLink: /api/v1/namespaces/helloworld/pods/hello-world-77b74d7cc8-mqc5s
    uid: 20baa776-6f32-4a81-94b1-9a78de13fb4f
  spec:
    containers:
    - image: gcr.io/google-samples/node-hello:1.0
      imagePullPolicy: IfNotPresent
      name: hello-world
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-dnrmh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-dnrmh
      secret:
        defaultMode: 420
        secretName: default-token-dnrmh
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-02-09T21:44:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-02-09T21:44:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-02-09T21:44:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-02-09T21:44:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f75f4cfaaeae17089bab52df03c2fc086650199d340c1117e3fef728e87f6fc0
      image: gcr.io/google-samples/node-hello:1.0
      imageID: docker-pullable://gcr.io/google-samples/node-hello@sha256:d238d0ab54efb76ec0f7b1da666cefa9b40be59ef34346a761b8adc2dd45459b
      lastState: {}
      name: hello-world
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-02-09T21:44:52Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.108.0.21
    podIPs:
    - ip: 10.108.0.21
    qosClass: BestEffort
    startTime: "2021-02-09T21:44:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      components.gke.io/component-name: event-exporter
      components.gke.io/component-version: 1.0.9
    creationTimestamp: "2021-01-21T00:07:21Z"
    generateName: event-exporter-gke-666b7ffbf7-
    labels:
      k8s-app: event-exporter
      pod-template-hash: 666b7ffbf7
      version: v0.3.4
    name: event-exporter-gke-666b7ffbf7-972cq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: event-exporter-gke-666b7ffbf7
      uid: 53ab190d-7f79-47e0-94f9-186fc91ce4b2
    resourceVersion: "1041"
    selfLink: /api/v1/namespaces/kube-system/pods/event-exporter-gke-666b7ffbf7-972cq
    uid: 40b1984e-f499-4e04-b29e-efd82092e695
  spec:
    containers:
    - command:
      - /event-exporter
      - -sink-opts=-stackdriver-resource-model=new -endpoint=https://logging.googleapis.com
      - -prometheus-endpoint=:8080
      image: gke.gcr.io/event-exporter:v0.3.4-gke.0
      imagePullPolicy: IfNotPresent
      name: event-exporter
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: event-exporter-sa-token-x6lj8
        readOnly: true
    - command:
      - /monitor
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --source=event_exporter:http://localhost:8080?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      - --node-name=$(NODE_NAME)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd-exporter
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: event-exporter-sa-token-x6lj8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    nodeSelector:
      kubernetes.io/os: linux
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsGroup: 1000
      runAsUser: 1000
    serviceAccount: event-exporter-sa
    serviceAccountName: event-exporter-sa
    terminationGracePeriodSeconds: 120
    tolerations:
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: ssl-certs
    - name: event-exporter-sa-token-x6lj8
      secret:
        defaultMode: 420
        secretName: event-exporter-sa-token-x6lj8
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://99f543faf07d54ee8bfc825babef2a2c298b2366a34e063713e96e744fade94d
      image: gke.gcr.io/event-exporter:v0.3.4-gke.0
      imageID: docker-pullable://gke.gcr.io/event-exporter@sha256:34b034af960047020f4674151bbb2b55878f82a0b76dabca81b518e9fe82180d
      lastState: {}
      name: event-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:00Z"
    - containerID: docker://8a2b39a3563f7d54eff20ec514eb865153cc5c4a3d98f84d8c9982d68b0b27de
      image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
      imageID: docker-pullable://gke.gcr.io/prometheus-to-sd@sha256:c5e12680a431990d5e39ed249dcb43a7672e99f7ef94a9928be40cf2f418f62f
      lastState: {}
      name: prometheus-to-sd-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:02Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.4
    podIPs:
    - ip: 10.108.2.4
    qosClass: BestEffort
    startTime: "2021-01-21T00:07:42Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      EnableKnativeConfig: "false"
      EnableNodeJournal: "false"
      EnablePodSecurityPolicy: "false"
      PodLogEnabled: "false"
      SystemOnlyLogging: "false"
      components.gke.io/component-name: fluentd
      components.gke.io/component-version: 1.0.13
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2021-01-21T00:08:07Z"
    generateName: fluentd-gke-
    labels:
      component: fluentd-gke
      controller-revision-hash: 84d4bfdf75
      k8s-app: fluentd-gke
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "2"
    name: fluentd-gke-c9nbp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluentd-gke
      uid: 89a570bf-75dc-444c-a7a2-c14c6776575c
    resourceVersion: "1059"
    selfLink: /api/v1/namespaces/kube-system/pods/fluentd-gke-c9nbp
    uid: fd19ae7a-6062-4d71-9acc-79175a9bb1a4
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-jxbs
    containers:
    - env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: STACKDRIVER_METADATA_AGENT_URL
        value: http://$(NODE_NAME):8799
      image: gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.36
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - |
            LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${STUCK_THRESHOLD_SECONDS:-900}; if [ ! -e /var/run/google-fluentd/fluentd-gke-buffers ]; then
              exit 1;
            fi; touch -d "${STUCK_THRESHOLD_SECONDS} seconds ago" /tmp/marker-stuck; if [ -z "$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-stuck -print -quit)" ]; then
              rm -rf /var/run/google-fluentd/fluentd-gke-buffers;
              exit 1;
            fi; touch -d "${LIVENESS_THRESHOLD_SECONDS} seconds ago" /tmp/marker-liveness; if [ -z "$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-liveness -print -quit)" ]; then
              exit 1;
            fi;
        failureThreshold: 3
        initialDelaySeconds: 600
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
      name: fluentd-gcp
      resources:
        limits:
          cpu: "1"
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 200Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/google-fluentd
        name: varrun
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /etc/google-fluentd/google-fluentd.conf
        name: config-volume
        subPath: google-fluentd.conf
      - mountPath: /etc/google-fluentd/config.d
        name: input-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gke-token-stx6h
        readOnly: true
    - command:
      - /monitor
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      - --node-name=$(NODE_NAME)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd-exporter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gke-token-stx6h
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluentd-gke
    serviceAccountName: fluentd-gke
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/google-fluentd
        type: ""
      name: varrun
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - configMap:
        defaultMode: 420
        name: fluentd-gke-input-config-v1.2.9
      name: input-config-volume
    - configMap:
        defaultMode: 420
        name: fluentd-gke-config-v1.2.9
      name: config-volume
    - name: fluentd-gke-token-stx6h
      secret:
        defaultMode: 420
        secretName: fluentd-gke-token-stx6h
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5b0c8555b6ad9f98cccf921c71627edf6522fb20b462e176bb70531bef34cb26
      image: gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.36
      imageID: docker-pullable://gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:e2ef6735a2730d3af25a2bdca6ecbcfc80a2d25f4aaf69cc25c4af9b56b39996
      lastState: {}
      name: fluentd-gcp
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:08Z"
    - containerID: docker://429a56c82e58f3b2c072c5701627584fc197c2fc3689deccd4e415d493d50d51
      image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
      imageID: docker-pullable://gke.gcr.io/prometheus-to-sd@sha256:c5e12680a431990d5e39ed249dcb43a7672e99f7ef94a9928be40cf2f418f62f
      lastState: {}
      name: prometheus-to-sd-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:08Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.150.0.4
    podIPs:
    - ip: 10.150.0.4
    qosClass: Burstable
    startTime: "2021-01-21T00:08:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      EnableKnativeConfig: "false"
      EnableNodeJournal: "false"
      EnablePodSecurityPolicy: "false"
      PodLogEnabled: "false"
      SystemOnlyLogging: "false"
      components.gke.io/component-name: fluentd
      components.gke.io/component-version: 1.0.13
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2021-01-21T00:08:09Z"
    generateName: fluentd-gke-
    labels:
      component: fluentd-gke
      controller-revision-hash: 84d4bfdf75
      k8s-app: fluentd-gke
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "2"
    name: fluentd-gke-lrzcb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluentd-gke
      uid: 89a570bf-75dc-444c-a7a2-c14c6776575c
    resourceVersion: "932"
    selfLink: /api/v1/namespaces/kube-system/pods/fluentd-gke-lrzcb
    uid: b90049c4-8236-4249-9a8d-d4a02e0ce885
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-k41k
    containers:
    - env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: STACKDRIVER_METADATA_AGENT_URL
        value: http://$(NODE_NAME):8799
      image: gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.36
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - |
            LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${STUCK_THRESHOLD_SECONDS:-900}; if [ ! -e /var/run/google-fluentd/fluentd-gke-buffers ]; then
              exit 1;
            fi; touch -d "${STUCK_THRESHOLD_SECONDS} seconds ago" /tmp/marker-stuck; if [ -z "$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-stuck -print -quit)" ]; then
              rm -rf /var/run/google-fluentd/fluentd-gke-buffers;
              exit 1;
            fi; touch -d "${LIVENESS_THRESHOLD_SECONDS} seconds ago" /tmp/marker-liveness; if [ -z "$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-liveness -print -quit)" ]; then
              exit 1;
            fi;
        failureThreshold: 3
        initialDelaySeconds: 600
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
      name: fluentd-gcp
      resources:
        limits:
          cpu: "1"
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 200Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/google-fluentd
        name: varrun
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /etc/google-fluentd/google-fluentd.conf
        name: config-volume
        subPath: google-fluentd.conf
      - mountPath: /etc/google-fluentd/config.d
        name: input-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gke-token-stx6h
        readOnly: true
    - command:
      - /monitor
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      - --node-name=$(NODE_NAME)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd-exporter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gke-token-stx6h
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluentd-gke
    serviceAccountName: fluentd-gke
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/google-fluentd
        type: ""
      name: varrun
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - configMap:
        defaultMode: 420
        name: fluentd-gke-input-config-v1.2.9
      name: input-config-volume
    - configMap:
        defaultMode: 420
        name: fluentd-gke-config-v1.2.9
      name: config-volume
    - name: fluentd-gke-token-stx6h
      secret:
        defaultMode: 420
        secretName: fluentd-gke-token-stx6h
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:11Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:11Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b97494da6797a534fd26c640128827353f69b89ff556202aec2d7e6bdf84893b
      image: gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.36
      imageID: docker-pullable://gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:e2ef6735a2730d3af25a2bdca6ecbcfc80a2d25f4aaf69cc25c4af9b56b39996
      lastState: {}
      name: fluentd-gcp
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:10Z"
    - containerID: docker://875c653d621be800a16a374e3bfdcf0eea19f9573ca9c6757cbce31d01af8d88
      image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
      imageID: docker-pullable://gke.gcr.io/prometheus-to-sd@sha256:c5e12680a431990d5e39ed249dcb43a7672e99f7ef94a9928be40cf2f418f62f
      lastState: {}
      name: prometheus-to-sd-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:10Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.150.0.2
    podIPs:
    - ip: 10.150.0.2
    qosClass: Burstable
    startTime: "2021-01-21T00:08:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      components.gke.io/component-name: fluentd-scaler
      components.gke.io/component-version: 1.0.2
    creationTimestamp: "2021-01-21T00:07:24Z"
    generateName: fluentd-gke-scaler-54796dcbf7-
    labels:
      k8s-app: fluentd-gke-scaler
      pod-template-hash: 54796dcbf7
    name: fluentd-gke-scaler-54796dcbf7-454km
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: fluentd-gke-scaler-54796dcbf7
      uid: 4b81d74d-e2d5-4117-9ae7-8d2f90cd4bb0
    resourceVersion: "1045"
    selfLink: /api/v1/namespaces/kube-system/pods/fluentd-gke-scaler-54796dcbf7-454km
    uid: 57c4edf7-4e46-4ed8-9651-0d725a68508b
  spec:
    containers:
    - command:
      - /scaler.sh
      - --ds-name=fluentd-gke
      - --scaling-policy=fluentd-gcp-scaling-policy
      env:
      - name: CPU_REQUEST
        value: 100m
      - name: MEMORY_REQUEST
        value: 200Mi
      - name: CPU_LIMIT
        value: "1"
      - name: MEMORY_LIMIT
        value: 500Mi
      image: gke.gcr.io/fluentd-gcp-scaler:0.5.4-gke.0
      imagePullPolicy: IfNotPresent
      name: fluentd-gke-scaler
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gke-scaler-token-tjfk6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluentd-gke-scaler
    serviceAccountName: fluentd-gke-scaler
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: fluentd-gke-scaler-token-tjfk6
      secret:
        defaultMode: 420
        secretName: fluentd-gke-scaler-token-tjfk6
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:40Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:40Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d0e399d60984d64b100498d376ad7a33a1b80e6894b589a35f8896d2a68178b8
      image: gke.gcr.io/fluentd-gcp-scaler:0.5.4-gke.0
      imageID: docker-pullable://gke.gcr.io/fluentd-gcp-scaler@sha256:b7016ebb6af6b21855ba4a159482bc3969da5c8cc1f475a865d8924910cf3ba6
      lastState: {}
      name: fluentd-gke-scaler
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:55Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.2
    podIPs:
    - ip: 10.108.2.2
    qosClass: BestEffort
    startTime: "2021-01-21T00:07:40Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      EnableKnativeConfig: "false"
      EnableNodeJournal: "false"
      EnablePodSecurityPolicy: "false"
      PodLogEnabled: "false"
      SystemOnlyLogging: "false"
      components.gke.io/component-name: fluentd
      components.gke.io/component-version: 1.0.13
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2021-01-21T00:09:07Z"
    generateName: fluentd-gke-
    labels:
      component: fluentd-gke
      controller-revision-hash: 84d4bfdf75
      k8s-app: fluentd-gke
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "2"
    name: fluentd-gke-wmpn2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluentd-gke
      uid: 89a570bf-75dc-444c-a7a2-c14c6776575c
    resourceVersion: "1260"
    selfLink: /api/v1/namespaces/kube-system/pods/fluentd-gke-wmpn2
    uid: c3218842-b6dc-4e38-a1a8-4ae45ca6bdb6
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-n5z8
    containers:
    - env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: STACKDRIVER_METADATA_AGENT_URL
        value: http://$(NODE_NAME):8799
      image: gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.36
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - |
            LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${STUCK_THRESHOLD_SECONDS:-900}; if [ ! -e /var/run/google-fluentd/fluentd-gke-buffers ]; then
              exit 1;
            fi; touch -d "${STUCK_THRESHOLD_SECONDS} seconds ago" /tmp/marker-stuck; if [ -z "$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-stuck -print -quit)" ]; then
              rm -rf /var/run/google-fluentd/fluentd-gke-buffers;
              exit 1;
            fi; touch -d "${LIVENESS_THRESHOLD_SECONDS} seconds ago" /tmp/marker-liveness; if [ -z "$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-liveness -print -quit)" ]; then
              exit 1;
            fi;
        failureThreshold: 3
        initialDelaySeconds: 600
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
      name: fluentd-gcp
      resources:
        limits:
          cpu: "1"
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 200Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/google-fluentd
        name: varrun
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /etc/google-fluentd/google-fluentd.conf
        name: config-volume
        subPath: google-fluentd.conf
      - mountPath: /etc/google-fluentd/config.d
        name: input-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gke-token-stx6h
        readOnly: true
    - command:
      - /monitor
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      - --node-name=$(NODE_NAME)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd-exporter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gke-token-stx6h
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluentd-gke
    serviceAccountName: fluentd-gke
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/google-fluentd
        type: ""
      name: varrun
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - configMap:
        defaultMode: 420
        name: fluentd-gke-input-config-v1.2.9
      name: input-config-volume
    - configMap:
        defaultMode: 420
        name: fluentd-gke-config-v1.2.9
      name: config-volume
    - name: fluentd-gke-token-stx6h
      secret:
        defaultMode: 420
        secretName: fluentd-gke-token-stx6h
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:09:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:09:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:09:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:09:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a20f96fe89fdce88e992e3005e12785f9251d7078411e8efb339ec362ed27680
      image: gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.36
      imageID: docker-pullable://gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:e2ef6735a2730d3af25a2bdca6ecbcfc80a2d25f4aaf69cc25c4af9b56b39996
      lastState: {}
      name: fluentd-gcp
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:09:08Z"
    - containerID: docker://d8c97870d3b7f8eff00cbb2a05ece4a80d882d766c4ca2635a2fddf25c4ca013
      image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
      imageID: docker-pullable://gke.gcr.io/prometheus-to-sd@sha256:c5e12680a431990d5e39ed249dcb43a7672e99f7ef94a9928be40cf2f418f62f
      lastState: {}
      name: prometheus-to-sd-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:09:08Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.150.0.3
    podIPs:
    - ip: 10.150.0.3
    qosClass: Burstable
    startTime: "2021-01-21T00:09:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      components.gke.io/component-name: gke-metrics-agent
      components.gke.io/component-version: 0.27.1
      configHash: hmTQNIDFihwy7g9QySAl44YTMBjYWKTwK28SlZ55hGQ=
    creationTimestamp: "2021-01-21T00:07:37Z"
    generateName: gke-metrics-agent-
    labels:
      component: gke-metrics-agent
      controller-revision-hash: 768c6d79f7
      k8s-app: gke-metrics-agent
      pod-template-generation: "1"
    name: gke-metrics-agent-4l86j
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: gke-metrics-agent
      uid: 898e82de-b866-4430-8961-307c81eaa826
    resourceVersion: "730"
    selfLink: /api/v1/namespaces/kube-system/pods/gke-metrics-agent-4l86j
    uid: d2ab1532-bff6-4a74-bb29-44bbd1323834
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-n5z8
    containers:
    - command:
      - /otelsvc
      - --config=/conf/gke-metrics-agent-config.yaml
      - --metrics-level=NONE
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBELET_HOST
        value: 127.0.0.1
      - name: ARG1
        value: ${1}
      - name: ARG2
        value: ${2}
      image: gcr.io/gke-release/gke-metrics-agent:0.1.3-gke.0
      imagePullPolicy: IfNotPresent
      name: gke-metrics-agent
      resources:
        limits:
          memory: 50Mi
        requests:
          cpu: 3m
          memory: 50Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /conf
        name: gke-metrics-agent-config-vol
      - mountPath: /etc/ssl/certs
        name: ssl-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: gke-metrics-agent-token-5sdw5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    nodeSelector:
      kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: gke-metrics-agent
    serviceAccountName: gke-metrics-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: gke-metrics-agent-config
          path: gke-metrics-agent-config.yaml
        name: gke-metrics-agent-conf
      name: gke-metrics-agent-config-vol
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: ssl-certs
    - name: gke-metrics-agent-token-5sdw5
      secret:
        defaultMode: 420
        secretName: gke-metrics-agent-token-5sdw5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://266ca720ba0b410a27efd4f32b398072ae86c2d7a3758a504b90d4a380c6b89a
      image: gcr.io/gke-release/gke-metrics-agent:0.1.3-gke.0
      imageID: docker-pullable://gcr.io/gke-release/gke-metrics-agent@sha256:9ba59e40ac1bccf7fce37903a3ef51d865d376f46907d7667f2e8b79d839ef58
      lastState: {}
      name: gke-metrics-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:43Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.150.0.3
    podIPs:
    - ip: 10.150.0.3
    qosClass: Burstable
    startTime: "2021-01-21T00:07:38Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      components.gke.io/component-name: gke-metrics-agent
      components.gke.io/component-version: 0.27.1
      configHash: hmTQNIDFihwy7g9QySAl44YTMBjYWKTwK28SlZ55hGQ=
    creationTimestamp: "2021-01-21T00:07:39Z"
    generateName: gke-metrics-agent-
    labels:
      component: gke-metrics-agent
      controller-revision-hash: 768c6d79f7
      k8s-app: gke-metrics-agent
      pod-template-generation: "1"
    name: gke-metrics-agent-4tfdh
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: gke-metrics-agent
      uid: 898e82de-b866-4430-8961-307c81eaa826
    resourceVersion: "717"
    selfLink: /api/v1/namespaces/kube-system/pods/gke-metrics-agent-4tfdh
    uid: 20e6a110-dc8d-48f0-ab94-373b06e43697
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-k41k
    containers:
    - command:
      - /otelsvc
      - --config=/conf/gke-metrics-agent-config.yaml
      - --metrics-level=NONE
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBELET_HOST
        value: 127.0.0.1
      - name: ARG1
        value: ${1}
      - name: ARG2
        value: ${2}
      image: gcr.io/gke-release/gke-metrics-agent:0.1.3-gke.0
      imagePullPolicy: IfNotPresent
      name: gke-metrics-agent
      resources:
        limits:
          memory: 50Mi
        requests:
          cpu: 3m
          memory: 50Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /conf
        name: gke-metrics-agent-config-vol
      - mountPath: /etc/ssl/certs
        name: ssl-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: gke-metrics-agent-token-5sdw5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    nodeSelector:
      kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: gke-metrics-agent
    serviceAccountName: gke-metrics-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: gke-metrics-agent-config
          path: gke-metrics-agent-config.yaml
        name: gke-metrics-agent-conf
      name: gke-metrics-agent-config-vol
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: ssl-certs
    - name: gke-metrics-agent-token-5sdw5
      secret:
        defaultMode: 420
        secretName: gke-metrics-agent-token-5sdw5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f88784fc32c9ae25fe09c61984a9904eef9684e0ed60c4a52be50c9be488ef34
      image: gcr.io/gke-release/gke-metrics-agent:0.1.3-gke.0
      imageID: docker-pullable://gcr.io/gke-release/gke-metrics-agent@sha256:9ba59e40ac1bccf7fce37903a3ef51d865d376f46907d7667f2e8b79d839ef58
      lastState: {}
      name: gke-metrics-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:43Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.150.0.2
    podIPs:
    - ip: 10.150.0.2
    qosClass: Burstable
    startTime: "2021-01-21T00:07:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      components.gke.io/component-name: gke-metrics-agent
      components.gke.io/component-version: 0.27.1
      configHash: hmTQNIDFihwy7g9QySAl44YTMBjYWKTwK28SlZ55hGQ=
    creationTimestamp: "2021-01-21T00:07:38Z"
    generateName: gke-metrics-agent-
    labels:
      component: gke-metrics-agent
      controller-revision-hash: 768c6d79f7
      k8s-app: gke-metrics-agent
      pod-template-generation: "1"
    name: gke-metrics-agent-6w48w
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: gke-metrics-agent
      uid: 898e82de-b866-4430-8961-307c81eaa826
    resourceVersion: "1044"
    selfLink: /api/v1/namespaces/kube-system/pods/gke-metrics-agent-6w48w
    uid: 3db9bffa-ce87-4d07-a05c-13ca875792b6
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-jxbs
    containers:
    - command:
      - /otelsvc
      - --config=/conf/gke-metrics-agent-config.yaml
      - --metrics-level=NONE
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBELET_HOST
        value: 127.0.0.1
      - name: ARG1
        value: ${1}
      - name: ARG2
        value: ${2}
      image: gcr.io/gke-release/gke-metrics-agent:0.1.3-gke.0
      imagePullPolicy: IfNotPresent
      name: gke-metrics-agent
      resources:
        limits:
          memory: 50Mi
        requests:
          cpu: 3m
          memory: 50Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /conf
        name: gke-metrics-agent-config-vol
      - mountPath: /etc/ssl/certs
        name: ssl-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: gke-metrics-agent-token-5sdw5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    nodeSelector:
      kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: gke-metrics-agent
    serviceAccountName: gke-metrics-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: gke-metrics-agent-config
          path: gke-metrics-agent-config.yaml
        name: gke-metrics-agent-conf
      name: gke-metrics-agent-config-vol
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: ssl-certs
    - name: gke-metrics-agent-token-5sdw5
      secret:
        defaultMode: 420
        secretName: gke-metrics-agent-token-5sdw5
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4b75d1d71e899d9f3b12f2fae8e43612a36fea89d9e357f90ecd0c39cdaf2acb
      image: gcr.io/gke-release/gke-metrics-agent:0.1.3-gke.0
      imageID: docker-pullable://gcr.io/gke-release/gke-metrics-agent@sha256:9ba59e40ac1bccf7fce37903a3ef51d865d376f46907d7667f2e8b79d839ef58
      lastState: {}
      name: gke-metrics-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:42Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.150.0.4
    podIPs:
    - ip: 10.150.0.4
    qosClass: Burstable
    startTime: "2021-01-21T00:07:38Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      components.gke.io/component-name: kubedns
      components.gke.io/component-version: 1.0.4
      scheduler.alpha.kubernetes.io/critical-pod: ""
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2021-01-21T00:07:44Z"
    generateName: kube-dns-66d6b7c877-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 66d6b7c877
    name: kube-dns-66d6b7c877-hwg88
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kube-dns-66d6b7c877
      uid: 45907e18-26d1-4d3d-bf46-809b606bdbe1
    resourceVersion: "945"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-dns-66d6b7c877-hwg88
    uid: b6f6199c-d5a5-4933-b924-f067113c7480
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - --domain=cluster.local.
      - --dns-port=10053
      - --config-dir=/kube-dns-config
      - --v=2
      env:
      - name: PROMETHEUS_PORT
        value: "10055"
      image: gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.15-gke.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthcheck/kubedns
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: kubedns
      ports:
      - containerPort: 10053
        name: dns-local
        protocol: UDP
      - containerPort: 10053
        name: dns-tcp-local
        protocol: TCP
      - containerPort: 10055
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readiness
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          memory: 210Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kube-dns-config
        name: kube-dns-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-6xb47
        readOnly: true
    - args:
      - -v=2
      - -logtostderr
      - -configDir=/etc/k8s/dns/dnsmasq-nanny
      - -restartDnsmasq=true
      - --
      - -k
      - --cache-size=1000
      - --no-negcache
      - --dns-forward-max=1500
      - --log-facility=-
      - --server=/cluster.local/127.0.0.1#10053
      - --server=/in-addr.arpa/127.0.0.1#10053
      - --server=/ip6.arpa/127.0.0.1#10053
      image: gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.15-gke.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthcheck/dnsmasq
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: dnsmasq
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      resources:
        requests:
          cpu: 150m
          memory: 20Mi
      securityContext:
        capabilities:
          add:
          - NET_BIND_SERVICE
          - SETGID
          drop:
          - all
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/k8s/dns/dnsmasq-nanny
        name: kube-dns-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-6xb47
        readOnly: true
    - args:
      - --v=2
      - --logtostderr
      - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
      - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
      image: gke.gcr.io/k8s-dns-sidecar-amd64:1.15.15-gke.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /metrics
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: sidecar
      ports:
      - containerPort: 10054
        name: metrics
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-6xb47
        readOnly: true
    - command:
      - /monitor
      - --source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      - --v=2
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gke.gcr.io/prometheus-to-sd:v0.4.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-6xb47
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      supplementalGroups:
      - 65534
    serviceAccount: kube-dns
    serviceAccountName: kube-dns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-dns
        optional: true
      name: kube-dns-config
    - name: kube-dns-token-6xb47
      secret:
        defaultMode: 420
        secretName: kube-dns-token-6xb47
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:44Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8f1831ddc89131ff11f0cf2c75848c1d706bff8615dd765ba18d6bdc9da70ec6
      image: gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.15-gke.0
      imageID: docker-pullable://gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:35cbe11ca242ccd6eebee411c2c5389b3560765d183b5fca13ffd7697cfeb498
      lastState: {}
      name: dnsmasq
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:08Z"
    - containerID: docker://71a747d2432e5a25c90aa4b509faf8ed2b3894ce7c804509080b1055ff263e3f
      image: gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.15-gke.0
      imageID: docker-pullable://gke.gcr.io/k8s-dns-kube-dns-amd64@sha256:6ff57cdd27b2c9e673aa76972ec3a7b54821c20775370b9ffe2059788f930139
      lastState: {}
      name: kubedns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:01Z"
    - containerID: docker://1ec66d6c8cdebfd4d8383325b2d22667f656f1cd7b4249dad4115554718c8b09
      image: gke.gcr.io/prometheus-to-sd:v0.4.2
      imageID: docker-pullable://gke.gcr.io/prometheus-to-sd@sha256:aca8ef83a7fae83f1f8583e978dd4d1ff655b9f2ca0a76bda5edce6d8965bdf2
      lastState: {}
      name: prometheus-to-sd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:13Z"
    - containerID: docker://e95fcc45df4bfae7b96deb180f64763c372c0f5f1561eacfb91c4c85f302d06e
      image: gke.gcr.io/k8s-dns-sidecar-amd64:1.15.15-gke.0
      imageID: docker-pullable://gke.gcr.io/k8s-dns-sidecar-amd64@sha256:1e2ebd31109e1e60a6d4b8b9b6c4ba8f3bff57dd577f331b981555f444f3e6b7
      lastState: {}
      name: sidecar
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:11Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.108.0.4
    podIPs:
    - ip: 10.108.0.4
    qosClass: Burstable
    startTime: "2021-01-21T00:07:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      components.gke.io/component-name: kubedns
      components.gke.io/component-version: 1.0.4
      scheduler.alpha.kubernetes.io/critical-pod: ""
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2021-01-21T00:07:21Z"
    generateName: kube-dns-66d6b7c877-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 66d6b7c877
    name: kube-dns-66d6b7c877-wflgq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kube-dns-66d6b7c877
      uid: 45907e18-26d1-4d3d-bf46-809b606bdbe1
    resourceVersion: "968"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-dns-66d6b7c877-wflgq
    uid: 978d5d2b-7cb9-47e6-9c49-b9d2ee12b72c
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - --domain=cluster.local.
      - --dns-port=10053
      - --config-dir=/kube-dns-config
      - --v=2
      env:
      - name: PROMETHEUS_PORT
        value: "10055"
      image: gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.15-gke.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthcheck/kubedns
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: kubedns
      ports:
      - containerPort: 10053
        name: dns-local
        protocol: UDP
      - containerPort: 10053
        name: dns-tcp-local
        protocol: TCP
      - containerPort: 10055
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readiness
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          memory: 210Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kube-dns-config
        name: kube-dns-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-6xb47
        readOnly: true
    - args:
      - -v=2
      - -logtostderr
      - -configDir=/etc/k8s/dns/dnsmasq-nanny
      - -restartDnsmasq=true
      - --
      - -k
      - --cache-size=1000
      - --no-negcache
      - --dns-forward-max=1500
      - --log-facility=-
      - --server=/cluster.local/127.0.0.1#10053
      - --server=/in-addr.arpa/127.0.0.1#10053
      - --server=/ip6.arpa/127.0.0.1#10053
      image: gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.15-gke.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthcheck/dnsmasq
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: dnsmasq
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      resources:
        requests:
          cpu: 150m
          memory: 20Mi
      securityContext:
        capabilities:
          add:
          - NET_BIND_SERVICE
          - SETGID
          drop:
          - all
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/k8s/dns/dnsmasq-nanny
        name: kube-dns-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-6xb47
        readOnly: true
    - args:
      - --v=2
      - --logtostderr
      - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
      - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
      image: gke.gcr.io/k8s-dns-sidecar-amd64:1.15.15-gke.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /metrics
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: sidecar
      ports:
      - containerPort: 10054
        name: metrics
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-6xb47
        readOnly: true
    - command:
      - /monitor
      - --source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      - --v=2
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gke.gcr.io/prometheus-to-sd:v0.4.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-6xb47
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      supplementalGroups:
      - 65534
    serviceAccount: kube-dns
    serviceAccountName: kube-dns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-dns
        optional: true
      name: kube-dns-config
    - name: kube-dns-token-6xb47
      secret:
        defaultMode: 420
        secretName: kube-dns-token-6xb47
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://27fbd88ec781810199ff0cfec4bc008378083d800830cf838294d3b566bc0949
      image: gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.15-gke.0
      imageID: docker-pullable://gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:35cbe11ca242ccd6eebee411c2c5389b3560765d183b5fca13ffd7697cfeb498
      lastState: {}
      name: dnsmasq
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:02Z"
    - containerID: docker://87d95be0d0f3be6b713e6ec733c9358c843c72dff752228791b35ef4a467a91d
      image: gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.15-gke.0
      imageID: docker-pullable://gke.gcr.io/k8s-dns-kube-dns-amd64@sha256:6ff57cdd27b2c9e673aa76972ec3a7b54821c20775370b9ffe2059788f930139
      lastState: {}
      name: kubedns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:54Z"
    - containerID: docker://8b8816eb3b8b618805fb7d07991ee6ea6550a19715165fd39967fd6a8457ead2
      image: gke.gcr.io/prometheus-to-sd:v0.4.2
      imageID: docker-pullable://gke.gcr.io/prometheus-to-sd@sha256:aca8ef83a7fae83f1f8583e978dd4d1ff655b9f2ca0a76bda5edce6d8965bdf2
      lastState: {}
      name: prometheus-to-sd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:08Z"
    - containerID: docker://2f4352e0ca4dae577c914cf08924c2009be65fbfa08258d8e69eb3cb2d2aad47
      image: gke.gcr.io/k8s-dns-sidecar-amd64:1.15.15-gke.0
      imageID: docker-pullable://gke.gcr.io/k8s-dns-sidecar-amd64@sha256:1e2ebd31109e1e60a6d4b8b9b6c4ba8f3bff57dd577f331b981555f444f3e6b7
      lastState: {}
      name: sidecar
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:05Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.108.1.2
    podIPs:
    - ip: 10.108.1.2
    qosClass: Burstable
    startTime: "2021-01-21T00:07:42Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      seccomp.security.alpha.kubernetes.io/pod: docker/default
    creationTimestamp: "2021-01-21T00:07:26Z"
    generateName: kube-dns-autoscaler-645f7d66cf-
    labels:
      k8s-app: kube-dns-autoscaler
      pod-template-hash: 645f7d66cf
    name: kube-dns-autoscaler-645f7d66cf-k47f2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kube-dns-autoscaler-645f7d66cf
      uid: 47d3f1b8-1691-4073-a7c7-ab0aaa74cc80
    resourceVersion: "1049"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-dns-autoscaler-645f7d66cf-k47f2
    uid: cf773ad2-bc47-4af2-b6c6-46a953d2efeb
  spec:
    containers:
    - command:
      - /cluster-proportional-autoscaler
      - --namespace=kube-system
      - --configmap=kube-dns-autoscaler
      - --target=Deployment/kube-dns
      - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
      - --logtostderr=true
      - --v=2
      image: gke.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1-gke.0
      imagePullPolicy: IfNotPresent
      name: autoscaler
      resources:
        requests:
          cpu: 20m
          memory: 10Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-autoscaler-token-kbq2t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      supplementalGroups:
      - 65534
    serviceAccount: kube-dns-autoscaler
    serviceAccountName: kube-dns-autoscaler
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-dns-autoscaler-token-kbq2t
      secret:
        defaultMode: 420
        secretName: kube-dns-autoscaler-token-kbq2t
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:40Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:40Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://59fd37b44eaaf0570b0aecc37e58c104747c0b991be4d343ad50642ae6ef3233
      image: asia.gcr.io/gke-release-staging/cluster-proportional-autoscaler-amd64:1.7.1-gke.0
      imageID: docker-pullable://asia.gcr.io/gke-release-staging/cluster-proportional-autoscaler-amd64@sha256:e3f48b3d1e49cfa3e7f002020769c9cd01cd0e77bbc99dc133c7ab0f8097e989
      lastState: {}
      name: autoscaler
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:44Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.3
    podIPs:
    - ip: 10.108.2.3
    qosClass: Burstable
    startTime: "2021-01-21T00:07:40Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 2df6691b84a34b368e7ead04254da388
      kubernetes.io/config.mirror: 2df6691b84a34b368e7ead04254da388
      kubernetes.io/config.seen: "2021-01-21T00:07:37.143543446Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-01-21T00:07:38Z"
    labels:
      component: kube-proxy
      tier: node
    name: kube-proxy-gke-us-east-gke-default-pool-e9a0b034-jxbs
    namespace: kube-system
    resourceVersion: "689"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-gke-us-east-gke-default-pool-e9a0b034-jxbs
    uid: 894cdc96-988f-4912-aaf7-a78824454ac9
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - exec kube-proxy --master=https://35.245.235.41 --kubeconfig=/var/lib/kube-proxy/kubeconfig
        --cluster-cidr=10.108.0.0/14 --oom-score-adj=-998 --v=2 --feature-gates=DynamicKubeletConfig=false,TaintBasedEvictions=false,RotateKubeletServerCertificate=true
        --iptables-sync-period=1m --iptables-min-sync-period=10s --ipvs-sync-period=1m
        --ipvs-min-sync-period=10s 1>>/var/log/kube-proxy.log 2>&1
      image: gke.gcr.io/kube-proxy-amd64:v1.16.15-gke.6000
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: etc-ssl-certs
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-ca-certs
        readOnly: true
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/kube-proxy/kubeconfig
        name: kubeconfig
      - mountPath: /run/xtables.lock
        name: iptableslock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    volumes:
    - hostPath:
        path: /usr/share/ca-certificates
        type: ""
      name: usr-ca-certs
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: etc-ssl-certs
    - hostPath:
        path: /var/lib/kube-proxy/kubeconfig
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: iptableslock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:40Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:40Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bdd3ce0a6f8a643fd90e0debf250d4d132c880a2608a7d0ecbebb775e5e24636
      image: gke.gcr.io/kube-proxy-amd64:v1.16.15-gke.6000
      imageID: docker://sha256:437d6a4b907f53c64353629ba54f4cded7e9156c33404ac0f60ec68f4bff6857
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:39Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.150.0.4
    podIPs:
    - ip: 10.150.0.4
    qosClass: Burstable
    startTime: "2021-01-21T00:07:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 2df6691b84a34b368e7ead04254da388
      kubernetes.io/config.mirror: 2df6691b84a34b368e7ead04254da388
      kubernetes.io/config.seen: "2021-01-21T00:07:38.667485776Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-01-21T00:07:39Z"
    labels:
      component: kube-proxy
      tier: node
    name: kube-proxy-gke-us-east-gke-default-pool-e9a0b034-k41k
    namespace: kube-system
    resourceVersion: "701"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-gke-us-east-gke-default-pool-e9a0b034-k41k
    uid: 0742aa12-1db2-4bbd-8c9f-dc00918a4dad
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - exec kube-proxy --master=https://35.245.235.41 --kubeconfig=/var/lib/kube-proxy/kubeconfig
        --cluster-cidr=10.108.0.0/14 --oom-score-adj=-998 --v=2 --feature-gates=DynamicKubeletConfig=false,TaintBasedEvictions=false,RotateKubeletServerCertificate=true
        --iptables-sync-period=1m --iptables-min-sync-period=10s --ipvs-sync-period=1m
        --ipvs-min-sync-period=10s 1>>/var/log/kube-proxy.log 2>&1
      image: gke.gcr.io/kube-proxy-amd64:v1.16.15-gke.6000
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: etc-ssl-certs
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-ca-certs
        readOnly: true
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/kube-proxy/kubeconfig
        name: kubeconfig
      - mountPath: /run/xtables.lock
        name: iptableslock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    volumes:
    - hostPath:
        path: /usr/share/ca-certificates
        type: ""
      name: usr-ca-certs
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: etc-ssl-certs
    - hostPath:
        path: /var/lib/kube-proxy/kubeconfig
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: iptableslock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bcf685c5a1a8ea65744eedb3b36c5472db85a9a34658644c3042e6bdb9ec6730
      image: gke.gcr.io/kube-proxy-amd64:v1.16.15-gke.6000
      imageID: docker://sha256:437d6a4b907f53c64353629ba54f4cded7e9156c33404ac0f60ec68f4bff6857
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:41Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.150.0.2
    podIPs:
    - ip: 10.150.0.2
    qosClass: Burstable
    startTime: "2021-01-21T00:07:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 2df6691b84a34b368e7ead04254da388
      kubernetes.io/config.mirror: 2df6691b84a34b368e7ead04254da388
      kubernetes.io/config.seen: "2021-01-21T00:07:37.076427259Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-01-21T00:07:38Z"
    labels:
      component: kube-proxy
      tier: node
    name: kube-proxy-gke-us-east-gke-default-pool-e9a0b034-n5z8
    namespace: kube-system
    resourceVersion: "686"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-gke-us-east-gke-default-pool-e9a0b034-n5z8
    uid: f69b3225-315e-43c7-969a-fec1939c101d
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - exec kube-proxy --master=https://35.245.235.41 --kubeconfig=/var/lib/kube-proxy/kubeconfig
        --cluster-cidr=10.108.0.0/14 --oom-score-adj=-998 --v=2 --feature-gates=DynamicKubeletConfig=false,TaintBasedEvictions=false,RotateKubeletServerCertificate=true
        --iptables-sync-period=1m --iptables-min-sync-period=10s --ipvs-sync-period=1m
        --ipvs-min-sync-period=10s 1>>/var/log/kube-proxy.log 2>&1
      image: gke.gcr.io/kube-proxy-amd64:v1.16.15-gke.6000
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: etc-ssl-certs
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-ca-certs
        readOnly: true
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/kube-proxy/kubeconfig
        name: kubeconfig
      - mountPath: /run/xtables.lock
        name: iptableslock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    volumes:
    - hostPath:
        path: /usr/share/ca-certificates
        type: ""
      name: usr-ca-certs
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: etc-ssl-certs
    - hostPath:
        path: /var/lib/kube-proxy/kubeconfig
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: iptableslock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:40Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:40Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://53b1b1b6f5d046449a8912115d76ec5c57784b03c88be25095481e74fd9fc1c1
      image: gke.gcr.io/kube-proxy-amd64:v1.16.15-gke.6000
      imageID: docker://sha256:437d6a4b907f53c64353629ba54f4cded7e9156c33404ac0f60ec68f4bff6857
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:39Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.150.0.3
    podIPs:
    - ip: 10.150.0.3
    qosClass: Burstable
    startTime: "2021-01-21T00:07:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      seccomp.security.alpha.kubernetes.io/pod: docker/default
    creationTimestamp: "2021-01-21T00:07:20Z"
    generateName: l7-default-backend-678889f899-
    labels:
      k8s-app: glbc
      name: glbc
      pod-template-hash: 678889f899
    name: l7-default-backend-678889f899-tlgpx
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: l7-default-backend-678889f899
      uid: 57284c33-ad3d-4c04-8724-791a6e03871b
    resourceVersion: "1284"
    selfLink: /api/v1/namespaces/kube-system/pods/l7-default-backend-678889f899-tlgpx
    uid: 4f3b616f-bfa4-4f98-8fbf-bfd04942145b
  spec:
    containers:
    - image: k8s.gcr.io/ingress-gce-404-server-with-metrics-amd64:v1.6.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: default-http-backend
      ports:
      - containerPort: 8080
        protocol: TCP
      resources:
        limits:
          cpu: 10m
          memory: 20Mi
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-p6bgh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-p6bgh
      secret:
        defaultMode: 420
        secretName: default-token-p6bgh
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:09:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:09:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://24cde641b6da3b3d0bef9247578cf0eefba00749437e5c6f7a7e5df207ea6040
      image: k8s.gcr.io/ingress-gce-404-server-with-metrics-amd64:v1.6.0
      imageID: docker-pullable://k8s.gcr.io/ingress-gce-404-server-with-metrics-amd64@sha256:d83d8a481145d0eb71f8bd71ae236d1c6a931dd3bdcaf80919a8ec4a4d8aff74
      lastState: {}
      name: default-http-backend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:09:12Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.6
    podIPs:
    - ip: 10.108.2.6
    qosClass: Guaranteed
    startTime: "2021-01-21T00:07:42Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      seccomp.security.alpha.kubernetes.io/pod: docker/default
    creationTimestamp: "2021-01-21T00:07:51Z"
    generateName: metrics-server-v0.3.6-64655c969-
    labels:
      k8s-app: metrics-server
      pod-template-hash: 64655c969
      version: v0.3.6
    name: metrics-server-v0.3.6-64655c969-hf9bl
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-v0.3.6-64655c969
      uid: 174a2440-c160-4cc9-811b-9eae79e7d2f3
    resourceVersion: "1060"
    selfLink: /api/v1/namespaces/kube-system/pods/metrics-server-v0.3.6-64655c969-hf9bl
    uid: 1d8ee21c-26ce-43ce-bde2-f313b4232099
  spec:
    containers:
    - command:
      - /metrics-server
      - --metric-resolution=30s
      - --kubelet-port=10255
      - --deprecated-kubelet-completely-insecure=true
      - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
      image: k8s.gcr.io/metrics-server-amd64:v0.3.6
      imagePullPolicy: IfNotPresent
      name: metrics-server
      ports:
      - containerPort: 443
        name: https
        protocol: TCP
      resources:
        limits:
          cpu: 43m
          memory: 55Mi
        requests:
          cpu: 43m
          memory: 55Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metrics-server-token-q6x4q
        readOnly: true
    - command:
      - /pod_nanny
      - --config-dir=/etc/config
      - --cpu=40m
      - --extra-cpu=0.5m
      - --memory=35Mi
      - --extra-memory=4Mi
      - --threshold=5
      - --deployment=metrics-server-v0.3.6
      - --container=metrics-server
      - --poll-period=300000
      - --estimator=exponential
      - --scale-down-delay=24h
      - --minClusterSize=5
      env:
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gke.gcr.io/addon-resizer:1.8.8-gke.1
      imagePullPolicy: IfNotPresent
      name: metrics-server-nanny
      resources:
        limits:
          cpu: 100m
          memory: 300Mi
        requests:
          cpu: 5m
          memory: 50Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: metrics-server-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metrics-server-token-q6x4q
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    nodeSelector:
      kubernetes.io/os: linux
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metrics-server
    serviceAccountName: metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: metrics-server-config
      name: metrics-server-config-volume
    - name: metrics-server-token-q6x4q
      secret:
        defaultMode: 420
        secretName: metrics-server-token-q6x4q
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://48bcbe89cb9ae08d3fd7bfa354f0421c09ff4b5ba3f41ad79a00c6619f21254f
      image: k8s.gcr.io/metrics-server-amd64:v0.3.6
      imageID: docker-pullable://k8s.gcr.io/metrics-server-amd64@sha256:c9c4e95068b51d6b33a9dccc61875df07dc650abbf4ac1a19d58b4628f89288b
      lastState: {}
      name: metrics-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:07Z"
    - containerID: docker://de3e8cf9d00be66a0b1360d03b6910c002cbe12cbecd168ce8f5b95fd78005fd
      image: asia.gcr.io/gke-release-staging/addon-resizer:1.8.8-gke.1
      imageID: docker-pullable://asia.gcr.io/gke-release-staging/addon-resizer@sha256:c6b0e87d835086b7e1f6fcf148611358534a8081e6489c8fee9c79c6597a4ee3
      lastState: {}
      name: metrics-server-nanny
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:11Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.5
    podIPs:
    - ip: 10.108.2.5
    qosClass: Burstable
    startTime: "2021-01-21T00:07:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-21T00:07:39Z"
    generateName: prometheus-to-sd-
    labels:
      controller-revision-hash: 7c676f4db4
      k8s-app: prometheus-to-sd
      pod-template-generation: "1"
    name: prometheus-to-sd-b7ppk
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-to-sd
      uid: d742146e-7e88-494a-8cdf-bb505c392d96
    resourceVersion: "808"
    selfLink: /api/v1/namespaces/kube-system/pods/prometheus-to-sd-b7ppk
    uid: 89e82a3b-19a9-4255-91a1-5f0fb76431e7
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-k41k
    containers:
    - command:
      - /monitor
      - --source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds&metricsPrefix=container.googleapis.com/internal/addons
      - --source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,runtime_operations_latency_microseconds,pleg_relist_latency_microseconds,pod_start_latency_microseconds,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total,storage_operation_status_count
      - --source=kubelet:http://localhost:10255/metrics/probes?whitelisted=prober_probe_total&podIdLabel=pod&namespaceIdLabel=namespace&containerNameLabel=container
      - --stackdriver-prefix=container.googleapis.com/internal/nodes
      - --api-override=https://monitoring.googleapis.com/
      image: k8s.gcr.io/prometheus-to-sd:v0.8.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-to-sd-token-bnhgj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: prometheus-to-sd
    serviceAccountName: prometheus-to-sd
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: prometheus-to-sd-token-bnhgj
      secret:
        defaultMode: 420
        secretName: prometheus-to-sd-token-bnhgj
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e7e5e12eaa77b3708a00a00924198299d5c28e4f86bd0542bf1ede24625c32d9
      image: k8s.gcr.io/prometheus-to-sd:v0.8.2
      imageID: docker-pullable://k8s.gcr.io/prometheus-to-sd@sha256:3216dd0e94d6911f6dc04f4258c0bf5cb1fff088ee2d3ce742ada490cbd5ca5c
      lastState: {}
      name: prometheus-to-sd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:55Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.150.0.2
    podIPs:
    - ip: 10.150.0.2
    qosClass: BestEffort
    startTime: "2021-01-21T00:07:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-21T00:07:37Z"
    generateName: prometheus-to-sd-
    labels:
      controller-revision-hash: 7c676f4db4
      k8s-app: prometheus-to-sd
      pod-template-generation: "1"
    name: prometheus-to-sd-s4c5l
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-to-sd
      uid: d742146e-7e88-494a-8cdf-bb505c392d96
    resourceVersion: "788"
    selfLink: /api/v1/namespaces/kube-system/pods/prometheus-to-sd-s4c5l
    uid: 596bd22a-b3ea-4f11-87ee-15424252b33c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-n5z8
    containers:
    - command:
      - /monitor
      - --source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds&metricsPrefix=container.googleapis.com/internal/addons
      - --source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,runtime_operations_latency_microseconds,pleg_relist_latency_microseconds,pod_start_latency_microseconds,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total,storage_operation_status_count
      - --source=kubelet:http://localhost:10255/metrics/probes?whitelisted=prober_probe_total&podIdLabel=pod&namespaceIdLabel=namespace&containerNameLabel=container
      - --stackdriver-prefix=container.googleapis.com/internal/nodes
      - --api-override=https://monitoring.googleapis.com/
      image: k8s.gcr.io/prometheus-to-sd:v0.8.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-to-sd-token-bnhgj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: prometheus-to-sd
    serviceAccountName: prometheus-to-sd
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: prometheus-to-sd-token-bnhgj
      secret:
        defaultMode: 420
        secretName: prometheus-to-sd-token-bnhgj
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://458dd5e2f9c8c52982e2d3e23913cb37b951dee18ff3e160d59a568f3fa964ac
      image: k8s.gcr.io/prometheus-to-sd:v0.8.2
      imageID: docker-pullable://k8s.gcr.io/prometheus-to-sd@sha256:3216dd0e94d6911f6dc04f4258c0bf5cb1fff088ee2d3ce742ada490cbd5ca5c
      lastState: {}
      name: prometheus-to-sd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:52Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.150.0.3
    podIPs:
    - ip: 10.150.0.3
    qosClass: BestEffort
    startTime: "2021-01-21T00:07:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-21T00:07:38Z"
    generateName: prometheus-to-sd-
    labels:
      controller-revision-hash: 7c676f4db4
      k8s-app: prometheus-to-sd
      pod-template-generation: "1"
    name: prometheus-to-sd-sk5tg
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-to-sd
      uid: d742146e-7e88-494a-8cdf-bb505c392d96
    resourceVersion: "1057"
    selfLink: /api/v1/namespaces/kube-system/pods/prometheus-to-sd-sk5tg
    uid: ce9f953b-0769-4695-9fdc-0339a0fba445
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - gke-us-east-gke-default-pool-e9a0b034-jxbs
    containers:
    - command:
      - /monitor
      - --source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds&metricsPrefix=container.googleapis.com/internal/addons
      - --source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,runtime_operations_latency_microseconds,pleg_relist_latency_microseconds,pod_start_latency_microseconds,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total,storage_operation_status_count
      - --source=kubelet:http://localhost:10255/metrics/probes?whitelisted=prober_probe_total&podIdLabel=pod&namespaceIdLabel=namespace&containerNameLabel=container
      - --stackdriver-prefix=container.googleapis.com/internal/nodes
      - --api-override=https://monitoring.googleapis.com/
      image: k8s.gcr.io/prometheus-to-sd:v0.8.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-to-sd-token-bnhgj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: prometheus-to-sd
    serviceAccountName: prometheus-to-sd
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: prometheus-to-sd-token-bnhgj
      secret:
        defaultMode: 420
        secretName: prometheus-to-sd-token-bnhgj
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:07:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a9ef2cf6a09b23692c50ae799fabab4150c78b24c3d20de6b0b459caa559f71b
      image: k8s.gcr.io/prometheus-to-sd:v0.8.2
      imageID: docker-pullable://k8s.gcr.io/prometheus-to-sd@sha256:3216dd0e94d6911f6dc04f4258c0bf5cb1fff088ee2d3ce742ada490cbd5ca5c
      lastState: {}
      name: prometheus-to-sd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:07:45Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.150.0.4
    podIPs:
    - ip: 10.150.0.4
    qosClass: BestEffort
    startTime: "2021-01-21T00:07:38Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      components.gke.io/component-name: stackdriver-metadata-agent
      components.gke.io/component-version: 1.1.4
    creationTimestamp: "2021-01-21T00:08:02Z"
    generateName: stackdriver-metadata-agent-cluster-level-846b7bccf-
    labels:
      app: stackdriver-metadata-agent
      cluster-level: "true"
      pod-template-hash: 846b7bccf
    name: stackdriver-metadata-agent-cluster-level-846b7bccf-wjfc9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: stackdriver-metadata-agent-cluster-level-846b7bccf
      uid: 3cef6ef9-34a4-4789-9ff7-2b1060e71d97
    resourceVersion: "922"
    selfLink: /api/v1/namespaces/kube-system/pods/stackdriver-metadata-agent-cluster-level-846b7bccf-wjfc9
    uid: 426f3e7b-ff2a-427e-9e96-999b89b86e81
  spec:
    containers:
    - args:
      - -logtostderr
      - -v=1
      env:
      - name: CLUSTER_NAME
        value: us-east-gke
      - name: CLUSTER_LOCATION
        value: us-east4-b
      - name: IGNORED_RESOURCES
        value: replicasets.v1.apps,replicasets.v1beta1.extensions
      image: gcr.io/stackdriver-agents/metadata-agent-go:1.2.0
      imagePullPolicy: IfNotPresent
      name: metadata-agent
      resources:
        limits:
          cpu: 48m
          memory: 112Mi
        requests:
          cpu: 48m
          memory: 112Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ssl-certs
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metadata-agent-token-nnjcc
        readOnly: true
    - command:
      - /pod_nanny
      - --config-dir=/etc/config
      - --cpu=40m
      - --extra-cpu=0.5m
      - --memory=80Mi
      - --extra-memory=2Mi
      - --threshold=5
      - --deployment=stackdriver-metadata-agent-cluster-level
      - --container=metadata-agent
      - --poll-period=300000
      - --estimator=exponential
      - --minClusterSize=16
      - --use-metrics=true
      env:
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gke.gcr.io/addon-resizer:1.8.11-gke.1
      imagePullPolicy: IfNotPresent
      name: metadata-agent-nanny
      resources:
        limits:
          memory: 90Mi
        requests:
          cpu: 50m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: metadata-agent-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metadata-agent-token-nnjcc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metadata-agent
    serviceAccountName: metadata-agent
    terminationGracePeriodSeconds: 5
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - key: components.gke.io/gke-managed-components
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: Directory
      name: ssl-certs
    - configMap:
        defaultMode: 420
        name: metadata-agent-config
      name: metadata-agent-config-volume
    - name: metadata-agent-token-nnjcc
      secret:
        defaultMode: 420
        secretName: metadata-agent-token-nnjcc
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:10Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:10Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T00:08:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2c14ca1cf8a8aefb7d6c8772b379981ba434e33cf5e4939a25b38bf58980d77e
      image: gcr.io/stackdriver-agents/metadata-agent-go:1.2.0
      imageID: docker-pullable://gcr.io/stackdriver-agents/metadata-agent-go@sha256:b7d97f6543ebd8d133da944f3631cc2501c16dbc2abc835e741f4dcc8daba3d7
      lastState: {}
      name: metadata-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:06Z"
    - containerID: docker://2e0cdee427cb3d79f20bae4cef5c8e32d0b7d7b7fff4121833369233f91e99da
      image: gke.gcr.io/addon-resizer:1.8.11-gke.1
      imageID: docker-pullable://gke.gcr.io/addon-resizer@sha256:39b3b30565c5dc4942630a14b1b7efe4851a986b2895bc76c25cab5303920b61
      lastState: {}
      name: metadata-agent-nanny
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-21T00:08:09Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.108.1.3
    podIPs:
    - ip: 10.108.1.3
    qosClass: Burstable
    startTime: "2021-01-21T00:08:02Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-26T06:32:15Z"
    generateName: mongo-mongodb-87b788c88-
    labels:
      app: mongodb
      chart: mongodb-7.8.10
      pod-template-hash: 87b788c88
      release: mongo
    name: mongo-mongodb-87b788c88-b6st2
    namespace: mongodb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: mongo-mongodb-87b788c88
      uid: 45fdab8c-65f4-4f50-a350-31368ab68a5d
    resourceVersion: "2222769"
    selfLink: /api/v1/namespaces/mongodb/pods/mongo-mongodb-87b788c88-b6st2
    uid: a53a0e66-11ee-4a83-a310-750743eb570c
  spec:
    containers:
    - env:
      - name: MONGODB_ROOT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mongodb-root-password
            name: mongo-mongodb
      - name: MONGODB_SYSTEM_LOG_VERBOSITY
        value: "0"
      - name: MONGODB_DISABLE_SYSTEM_LOG
        value: "no"
      - name: MONGODB_ENABLE_IPV6
        value: "no"
      - name: MONGODB_ENABLE_DIRECTORY_PER_DB
        value: "no"
      image: docker.io/bitnami/mongodb:4.2.4-debian-10-r0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - mongo
          - --eval
          - db.adminCommand('ping')
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: mongo-mongodb
      ports:
      - containerPort: 27017
        name: mongodb
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - mongo
          - --eval
          - db.adminCommand('ping')
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/mongodb
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-5h4wl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: mongo-mongodb
    - name: default-token-5h4wl
      secret:
        defaultMode: 420
        secretName: default-token-5h4wl
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-26T06:32:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-26T06:32:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-26T06:32:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-26T06:32:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e46836c75ee2d17af6d6d1bc1a9845ba6d8111788fda1d39ac49be244cbc7236
      image: bitnami/mongodb:4.2.4-debian-10-r0
      imageID: docker-pullable://bitnami/mongodb@sha256:85f9e2064f2170abc397ad986ffe798ed2b5444ff23e4406838aa010b6990648
      lastState: {}
      name: mongo-mongodb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-26T06:32:42Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.108.1.24
    podIPs:
    - ip: 10.108.1.24
    qosClass: BestEffort
    startTime: "2021-01-26T06:32:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-30T06:45:38Z"
    labels:
      app: myapp
      costcenter: amer
    name: myapp-pod
    namespace: multi-container
    resourceVersion: "3912811"
    selfLink: /api/v1/namespaces/multi-container/pods/myapp-pod
    uid: 38d46561-8857-44ed-a137-ad8c1c77ec76
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-wpr7x
        readOnly: true
    - image: redis
      imagePullPolicy: Always
      name: backend-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-wpr7x
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-wpr7x
      secret:
        defaultMode: 420
        secretName: default-token-wpr7x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T06:45:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T06:45:50Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T06:45:50Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T06:45:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b0654d68092fb19330ec6da50ca1e8cc01d18f2f68945407cebf6b7bb88f35bb
      image: redis:latest
      imageID: docker-pullable://redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494
      lastState: {}
      name: backend-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T06:45:49Z"
    - containerID: docker://b81a2dd9c77942f723ea4cb0018bc9d0df7d52b4d971c31c787bfa09cc6d3890
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa
      lastState: {}
      name: nginx-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T06:45:47Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.108.0.16
    podIPs:
    - ip: 10.108.0.16
    qosClass: BestEffort
    startTime: "2021-01-30T06:45:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-30T19:09:36Z"
    generateName: myapp-rc-
    labels:
      app: myapp
      costcenter: amer
    name: myapp-rc-fh9hv
    namespace: rc
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicationController
      name: myapp-rc
      uid: af94591d-a3e3-4b6b-9992-8d83f7d19a9c
    resourceVersion: "4130675"
    selfLink: /api/v1/namespaces/rc/pods/myapp-rc-fh9hv
    uid: 318df196-3b30-414c-ae26-4d3d6429d78f
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    - image: redis
      imagePullPolicy: Always
      name: backend-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-xj24l
      secret:
        defaultMode: 420
        secretName: default-token-xj24l
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:47Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:47Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5dae3c42983eb60b3649b477836cd87dbebc8a225f21e6662cba80b340d27e1b
      image: redis:latest
      imageID: docker-pullable://redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494
      lastState: {}
      name: backend-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:09:46Z"
    - containerID: docker://130718cd8631890a0954927dbf18580f12cc3b6ea95d5855fae0a291d4c1a23b
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa
      lastState: {}
      name: nginx-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:09:44Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.108.1.25
    podIPs:
    - ip: 10.108.1.25
    qosClass: BestEffort
    startTime: "2021-01-30T19:09:36Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-30T19:09:36Z"
    generateName: myapp-rc-
    labels:
      app: myapp
      costcenter: amer
    name: myapp-rc-q4qcg
    namespace: rc
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicationController
      name: myapp-rc
      uid: af94591d-a3e3-4b6b-9992-8d83f7d19a9c
    resourceVersion: "4130666"
    selfLink: /api/v1/namespaces/rc/pods/myapp-rc-q4qcg
    uid: b93340d8-ee0f-42fe-ba92-acf6aca136ef
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    - image: redis
      imagePullPolicy: Always
      name: backend-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-xj24l
      secret:
        defaultMode: 420
        secretName: default-token-xj24l
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d24154f08667802c75e8c780c85c3ae657aed0614b4ca56c6c85f266a35f4c4f
      image: redis:latest
      imageID: docker-pullable://redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494
      lastState: {}
      name: backend-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:09:45Z"
    - containerID: docker://7622b09ba3e22cf67b8f98c77e396336f31eb78efbd4216368a8737a9431db83
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa
      lastState: {}
      name: nginx-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:09:43Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.28
    podIPs:
    - ip: 10.108.2.28
    qosClass: BestEffort
    startTime: "2021-01-30T19:09:36Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-30T19:09:36Z"
    generateName: myapp-rc-
    labels:
      app: myapp
      costcenter: amer
    name: myapp-rc-snt5t
    namespace: rc
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicationController
      name: myapp-rc
      uid: af94591d-a3e3-4b6b-9992-8d83f7d19a9c
    resourceVersion: "4130636"
    selfLink: /api/v1/namespaces/rc/pods/myapp-rc-snt5t
    uid: 365d2eed-4791-424c-9ec4-5cfb8e43655b
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    - image: redis
      imagePullPolicy: Always
      name: backend-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-k41k
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-xj24l
      secret:
        defaultMode: 420
        secretName: default-token-xj24l
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:09:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://65770c2a6925b31a476306612decdae8770c53ed0b0b02d3123e9ca1149dd317
      image: redis:latest
      imageID: docker-pullable://redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494
      lastState: {}
      name: backend-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:09:38Z"
    - containerID: docker://34a2e45da4929e373a4446ad6295dd89044a0bfe6da72bb35e08e3a676819bde
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa
      lastState: {}
      name: nginx-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:09:38Z"
    hostIP: 10.150.0.2
    phase: Running
    podIP: 10.108.0.17
    podIPs:
    - ip: 10.108.0.17
    qosClass: BestEffort
    startTime: "2021-01-30T19:09:36Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-30T19:39:42Z"
    generateName: myapp-rs-
    labels:
      app: my-app
      type: front-end
    name: myapp-rs-8xbxj
    namespace: rc
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: myapp-rs
      uid: 02637291-8a0b-4f2f-ae2f-9774c4ca9e63
    resourceVersion: "4139463"
    selfLink: /api/v1/namespaces/rc/pods/myapp-rs-8xbxj
    uid: 90886c8e-e0fa-477e-bacd-2d260c010b60
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    - image: redis
      imagePullPolicy: Always
      name: backend-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-jxbs
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-xj24l
      secret:
        defaultMode: 420
        secretName: default-token-xj24l
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:39:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:39:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:39:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:39:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://798bf8ecbb29b584fdab84697b3999db73e7fb8d7bc7a83c1dbffbd201c1b187
      image: redis:latest
      imageID: docker-pullable://redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494
      lastState: {}
      name: backend-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:39:44Z"
    - containerID: docker://2019da1d121196d0d2e53f544a05486a3219dbb5ffe047847755806d907856cd
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa
      lastState: {}
      name: nginx-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:39:44Z"
    hostIP: 10.150.0.4
    phase: Running
    podIP: 10.108.2.29
    podIPs:
    - ip: 10.108.2.29
    qosClass: BestEffort
    startTime: "2021-01-30T19:39:42Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-30T19:39:42Z"
    generateName: myapp-rs-
    labels:
      app: my-app
      type: front-end
    name: myapp-rs-zlg7r
    namespace: rc
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: myapp-rs
      uid: 02637291-8a0b-4f2f-ae2f-9774c4ca9e63
    resourceVersion: "4139473"
    selfLink: /api/v1/namespaces/rc/pods/myapp-rs-zlg7r
    uid: 3d964722-a1d7-4804-95b4-e651ff124e45
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    - image: redis
      imagePullPolicy: Always
      name: backend-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-xj24l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: gke-us-east-gke-default-pool-e9a0b034-n5z8
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-xj24l
      secret:
        defaultMode: 420
        secretName: default-token-xj24l
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:39:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:39:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:39:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-30T19:39:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://12f4216eb88ac32fd6b85858bfd66909d9dc49a8495664385c1374ef22c4540a
      image: redis:latest
      imageID: docker-pullable://redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494
      lastState: {}
      name: backend-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:39:44Z"
    - containerID: docker://caf7e577d54496136e7b3aa9611959d59efb3a2eae1541ad9802af6ca26538bf
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa
      lastState: {}
      name: nginx-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-30T19:39:44Z"
    hostIP: 10.150.0.3
    phase: Running
    podIP: 10.108.1.26
    podIPs:
    - ip: 10.108.1.26
    qosClass: BestEffort
    startTime: "2021-01-30T19:39:42Z"
- apiVersion: v1
  kind: ReplicationController
  metadata:
    creationTimestamp: "2021-01-30T19:09:35Z"
    generation: 1
    labels:
      app: myapp
      type: front-end
    name: myapp-rc
    namespace: rc
    resourceVersion: "4130676"
    selfLink: /api/v1/namespaces/rc/replicationcontrollers/myapp-rc
    uid: af94591d-a3e3-4b6b-9992-8d83f7d19a9c
  spec:
    replicas: 3
    selector:
      app: myapp
      costcenter: amer
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: myapp
          costcenter: amer
        name: myapp-pod
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - image: redis
          imagePullPolicy: Always
          name: backend-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 1
    readyReplicas: 3
    replicas: 3
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2021-01-21T05:25:56Z"
    labels:
      app: carts
    name: carts
    namespace: default
    resourceVersion: "94903"
    selfLink: /api/v1/namespaces/default/services/carts
    uid: da3abf48-7050-4115-939b-8ada2d30fd50
  spec:
    clusterIP: 10.112.9.5
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: carts
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2021-01-21T05:17:51Z"
    labels:
      app: catalogue
    name: catalogue
    namespace: default
    resourceVersion: "92510"
    selfLink: /api/v1/namespaces/default/services/catalogue
    uid: 854c8a23-70a9-4cf2-93b1-a2c8a9ef01c3
  spec:
    clusterIP: 10.112.6.185
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8081
    selector:
      app: catalogue
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2021-01-21T05:15:52Z"
    labels:
      app: catalogue-db
    name: catalogue-db
    namespace: default
    resourceVersion: "91870"
    selfLink: /api/v1/namespaces/default/services/catalogue-db
    uid: 7b710757-4aa7-4e99-81c2-ee66ff91432d
  spec:
    clusterIP: 10.112.6.113
    ports:
    - port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      app: catalogue-db
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2021-01-21T01:40:35Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app: frontend
    name: frontend-service
    namespace: default
    resourceVersion: "55434"
    selfLink: /api/v1/namespaces/default/services/frontend-service
    uid: 8bdf8e20-8d62-4625-a288-de692e374895
  spec:
    clusterIP: 10.112.12.18
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 30881
      port: 80
      protocol: TCP
      targetPort: 8079
    selector:
      app: frontend
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - ip: 34.86.59.181
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2021-01-21T00:07:04Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "145"
    selfLink: /api/v1/namespaces/default/services/kubernetes
    uid: af874180-ad44-4fbd-b865-af775dee5eaf
  spec:
    clusterIP: 10.112.0.1
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2021-02-09T21:45:41Z"
    name: example-service
    namespace: helloworld
    resourceVersion: "8392239"
    selfLink: /api/v1/namespaces/helloworld/services/example-service
    uid: 8ab0d2e7-d678-4f4c-aed5-fefd86847ce5
  spec:
    clusterIP: 10.112.13.70
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 30830
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      run: load-balancer-example
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"glbc","kubernetes.io/cluster-service":"true","kubernetes.io/name":"GLBCDefaultBackend"},"name":"default-http-backend","namespace":"kube-system"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":8080}],"selector":{"k8s-app":"glbc"},"type":"NodePort"}}
    creationTimestamp: "2021-01-21T00:07:20Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: glbc
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: GLBCDefaultBackend
    name: default-http-backend
    namespace: kube-system
    resourceVersion: "270"
    selfLink: /api/v1/namespaces/kube-system/services/default-http-backend
    uid: e34aadf8-b7d0-42a6-90f1-73b9c3d10cb2
  spec:
    clusterIP: 10.112.0.171
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 30334
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      k8s-app: glbc
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true","kubernetes.io/name":"KubeDNS"},"name":"kube-dns","namespace":"kube-system"},"spec":{"clusterIP":"10.112.0.10","ports":[{"name":"dns","port":53,"protocol":"UDP"},{"name":"dns-tcp","port":53,"protocol":"TCP"}],"selector":{"k8s-app":"kube-dns"}}}
    creationTimestamp: "2021-01-21T00:07:21Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: KubeDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "319"
    selfLink: /api/v1/namespaces/kube-system/services/kube-dns
    uid: 8e71bb5b-9d49-4f9f-915d-9e8cf1632d5a
  spec:
    clusterIP: 10.112.0.10
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","kubernetes.io/cluster-service":"true","kubernetes.io/name":"Metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"ports":[{"port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"k8s-app":"metrics-server"}}}
    creationTimestamp: "2021-01-21T00:07:22Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: Metrics-server
    name: metrics-server
    namespace: kube-system
    resourceVersion: "371"
    selfLink: /api/v1/namespaces/kube-system/services/metrics-server
    uid: d944325f-7a8b-4fc2-8afe-7272346a4e88
  spec:
    clusterIP: 10.112.1.5
    ports:
    - port: 443
      protocol: TCP
      targetPort: https
    selector:
      k8s-app: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: mongo
      meta.helm.sh/release-namespace: mongodb
    creationTimestamp: "2021-01-26T06:32:14Z"
    labels:
      app: mongodb
      app.kubernetes.io/managed-by: Helm
      chart: mongodb-7.8.10
      heritage: Helm
      release: mongo
    name: mongo-mongodb
    namespace: mongodb
    resourceVersion: "2222581"
    selfLink: /api/v1/namespaces/mongodb/services/mongo-mongodb
    uid: 1022bc0f-5c32-4e43-8fdc-430a439b7f04
  spec:
    clusterIP: 10.112.7.1
    ports:
    - name: mongodb
      port: 27017
      protocol: TCP
      targetPort: mongodb
    selector:
      app: mongodb
      release: mongo
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"fluentd-gke","kubernetes.io/cluster-service":"true"},"name":"fluentd-gke","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"component":"fluentd-gke","k8s-app":"fluentd-gke"}},"template":{"metadata":{"annotations":{"EnableKnativeConfig":"false","EnableNodeJournal":"false","EnablePodSecurityPolicy":"false","PodLogEnabled":"false","SystemOnlyLogging":"false","components.gke.io/component-name":"fluentd","components.gke.io/component-version":"1.0.13","scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"component":"fluentd-gke","k8s-app":"fluentd-gke","kubernetes.io/cluster-service":"true"}},"spec":{"containers":[{"env":[{"name":"NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"K8S_NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"STACKDRIVER_METADATA_AGENT_URL","value":"http://$(NODE_NAME):8799"}],"image":"gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.36","livenessProbe":{"exec":{"command":["/bin/sh","-c","LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${STUCK_THRESHOLD_SECONDS:-900}; if [ ! -e /var/run/google-fluentd/fluentd-gke-buffers ]; then\n  exit 1;\nfi; touch -d \"${STUCK_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-stuck; if [ -z \"$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-stuck -print -quit)\" ]; then\n  rm -rf /var/run/google-fluentd/fluentd-gke-buffers;\n  exit 1;\nfi; touch -d \"${LIVENESS_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-liveness; if [ -z \"$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-liveness -print -quit)\" ]; then\n  exit 1;\nfi;\n"]},"initialDelaySeconds":600,"periodSeconds":60},"name":"fluentd-gcp","volumeMounts":[{"mountPath":"/var/run/google-fluentd","name":"varrun"},{"mountPath":"/var/log","name":"varlog"},{"mountPath":"/var/lib/docker/containers","name":"varlibdockercontainers","readOnly":true},{"mountPath":"/etc/google-fluentd/google-fluentd.conf","name":"config-volume","subPath":"google-fluentd.conf"},{"mountPath":"/etc/google-fluentd/config.d","name":"input-config-volume"}]},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)","--node-name=$(NODE_NAME)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}}],"image":"gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0","name":"prometheus-to-sd-exporter"}],"dnsPolicy":"Default","hostNetwork":true,"nodeSelector":{"beta.kubernetes.io/os":"linux"},"priorityClassName":"system-node-critical","serviceAccountName":"fluentd-gke","terminationGracePeriodSeconds":30,"tolerations":[{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"},{"key":"components.gke.io/gke-managed-components","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/run/google-fluentd"},"name":"varrun"},{"hostPath":{"path":"/var/log"},"name":"varlog"},{"hostPath":{"path":"/var/lib/docker/containers"},"name":"varlibdockercontainers"},{"configMap":{"name":"fluentd-gke-input-config-v1.2.9"},"name":"input-config-volume"},{"configMap":{"name":"fluentd-gke-config-v1.2.9"},"name":"config-volume"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: "2021-01-21T00:07:21Z"
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: fluentd-gke
      kubernetes.io/cluster-service: "true"
    name: fluentd-gke
    namespace: kube-system
    resourceVersion: "5177861"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/fluentd-gke
    uid: 89a570bf-75dc-444c-a7a2-c14c6776575c
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        component: fluentd-gke
        k8s-app: fluentd-gke
    template:
      metadata:
        annotations:
          EnableKnativeConfig: "false"
          EnableNodeJournal: "false"
          EnablePodSecurityPolicy: "false"
          PodLogEnabled: "false"
          SystemOnlyLogging: "false"
          components.gke.io/component-name: fluentd
          components.gke.io/component-version: 1.0.13
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          component: fluentd-gke
          k8s-app: fluentd-gke
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: STACKDRIVER_METADATA_AGENT_URL
            value: http://$(NODE_NAME):8799
          image: gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.36
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${STUCK_THRESHOLD_SECONDS:-900}; if [ ! -e /var/run/google-fluentd/fluentd-gke-buffers ]; then
                  exit 1;
                fi; touch -d "${STUCK_THRESHOLD_SECONDS} seconds ago" /tmp/marker-stuck; if [ -z "$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-stuck -print -quit)" ]; then
                  rm -rf /var/run/google-fluentd/fluentd-gke-buffers;
                  exit 1;
                fi; touch -d "${LIVENESS_THRESHOLD_SECONDS} seconds ago" /tmp/marker-liveness; if [ -z "$(find /var/run/google-fluentd/fluentd-gke-buffers -type d -newer /tmp/marker-liveness -print -quit)" ]; then
                  exit 1;
                fi;
            failureThreshold: 3
            initialDelaySeconds: 600
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 1
          name: fluentd-gcp
          resources:
            limits:
              cpu: "1"
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/google-fluentd
            name: varrun
          - mountPath: /var/log
            name: varlog
          - mountPath: /var/lib/docker/containers
            name: varlibdockercontainers
            readOnly: true
          - mountPath: /etc/google-fluentd/google-fluentd.conf
            name: config-volume
            subPath: google-fluentd.conf
          - mountPath: /etc/google-fluentd/config.d
            name: input-config-volume
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          - --node-name=$(NODE_NAME)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: fluentd-gke
        serviceAccountName: fluentd-gke
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - hostPath:
            path: /var/run/google-fluentd
            type: ""
          name: varrun
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
            type: ""
          name: varlibdockercontainers
        - configMap:
            defaultMode: 420
            name: fluentd-gke-input-config-v1.2.9
          name: input-config-volume
        - configMap:
            defaultMode: 420
            name: fluentd-gke-config-v1.2.9
          name: config-volume
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 2
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","component":"gke-metrics-agent","k8s-app":"gke-metrics-agent"},"name":"gke-metrics-agent","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"component":"gke-metrics-agent","k8s-app":"gke-metrics-agent"}},"template":{"metadata":{"annotations":{"components.gke.io/component-name":"gke-metrics-agent","components.gke.io/component-version":"0.27.1","configHash":"hmTQNIDFihwy7g9QySAl44YTMBjYWKTwK28SlZ55hGQ="},"labels":{"component":"gke-metrics-agent","k8s-app":"gke-metrics-agent"}},"spec":{"containers":[{"command":["/otelsvc","--config=/conf/gke-metrics-agent-config.yaml","--metrics-level=NONE"],"env":[{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"KUBELET_HOST","value":"127.0.0.1"},{"name":"ARG1","value":"${1}"},{"name":"ARG2","value":"${2}"}],"image":"gcr.io/gke-release/gke-metrics-agent:0.1.3-gke.0","name":"gke-metrics-agent","resources":{"limits":{"memory":"50Mi"},"requests":{"cpu":"3m","memory":"50Mi"}},"volumeMounts":[{"mountPath":"/conf","name":"gke-metrics-agent-config-vol"},{"mountPath":"/etc/ssl/certs","name":"ssl-certs","readOnly":true}]}],"hostNetwork":true,"nodeSelector":{"kubernetes.io/os":"linux"},"priorityClassName":"system-node-critical","serviceAccount":"gke-metrics-agent","tolerations":[{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"},{"key":"components.gke.io/gke-managed-components","operator":"Exists"}],"volumes":[{"configMap":{"items":[{"key":"gke-metrics-agent-config","path":"gke-metrics-agent-config.yaml"}],"name":"gke-metrics-agent-conf"},"name":"gke-metrics-agent-config-vol"},{"hostPath":{"path":"/etc/ssl/certs"},"name":"ssl-certs"}]}}}}
    creationTimestamp: "2021-01-21T00:07:25Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      component: gke-metrics-agent
      k8s-app: gke-metrics-agent
    name: gke-metrics-agent
    namespace: kube-system
    resourceVersion: "5177872"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/gke-metrics-agent
    uid: 898e82de-b866-4430-8961-307c81eaa826
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        component: gke-metrics-agent
        k8s-app: gke-metrics-agent
    template:
      metadata:
        annotations:
          components.gke.io/component-name: gke-metrics-agent
          components.gke.io/component-version: 0.27.1
          configHash: hmTQNIDFihwy7g9QySAl44YTMBjYWKTwK28SlZ55hGQ=
        creationTimestamp: null
        labels:
          component: gke-metrics-agent
          k8s-app: gke-metrics-agent
      spec:
        containers:
        - command:
          - /otelsvc
          - --config=/conf/gke-metrics-agent-config.yaml
          - --metrics-level=NONE
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBELET_HOST
            value: 127.0.0.1
          - name: ARG1
            value: ${1}
          - name: ARG2
            value: ${2}
          image: gcr.io/gke-release/gke-metrics-agent:0.1.3-gke.0
          imagePullPolicy: IfNotPresent
          name: gke-metrics-agent
          resources:
            limits:
              memory: 50Mi
            requests:
              cpu: 3m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /conf
            name: gke-metrics-agent-config-vol
          - mountPath: /etc/ssl/certs
            name: ssl-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gke-metrics-agent
        serviceAccountName: gke-metrics-agent
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: gke-metrics-agent-config
              path: gke-metrics-agent-config.yaml
            name: gke-metrics-agent-conf
          name: gke-metrics-agent-config-vol
        - hostPath:
            path: /etc/ssl/certs
            type: ""
          name: ssl-certs
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","component":"gke-metrics-agent","k8s-app":"gke-metrics-agent"},"name":"gke-metrics-agent-windows","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"component":"gke-metrics-agent","k8s-app":"gke-metrics-agent"}},"template":{"metadata":{"annotations":{"components.gke.io/component-name":"gke-metrics-agent","components.gke.io/component-version":"0.27.1","configHash":"hmTQNIDFihwy7g9QySAl44YTMBjYWKTwK28SlZ55hGQ="},"labels":{"component":"gke-metrics-agent","k8s-app":"gke-metrics-agent"}},"spec":{"containers":[{"command":["c:\\otelsvc.exe","--config=/conf/gke-metrics-agent-config.yaml","--metrics-level=NONE"],"env":[{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"KUBELET_HOST","valueFrom":{"fieldRef":{"fieldPath":"status.hostIP"}}},{"name":"KUBERNETES_SERVICE_HOST","value":"kubernetes.default.svc.cluster.local"},{"name":"ARG1","value":"${1}"},{"name":"ARG2","value":"${2}"}],"image":"gcr.io/gke-release/gke-metrics-agent-windows:0.1.3-gke.0","name":"gke-metrics-agent","resources":{"limits":{"memory":"200Mi"},"requests":{"cpu":"5m","memory":"200Mi"}},"volumeMounts":[{"mountPath":"/conf","name":"gke-metrics-agent-config-vol"}]}],"nodeSelector":{"kubernetes.io/os":"windows"},"priorityClassName":"system-node-critical","serviceAccount":"gke-metrics-agent","tolerations":[{"effect":"NoExecute","key":"node.kubernetes.io/not-ready","operator":"Exists","tolerationSeconds":300},{"effect":"NoExecute","key":"node.kubernetes.io/unreachable","operator":"Exists","tolerationSeconds":300},{"effect":"NoSchedule","key":"node.kubernetes.io/os","operator":"Equal","value":"windows"},{"key":"components.gke.io/gke-managed-components","operator":"Exists"}],"volumes":[{"configMap":{"items":[{"key":"gke-metrics-agent-config","path":"gke-metrics-agent-config.yaml"}],"name":"gke-metrics-agent-conf"},"name":"gke-metrics-agent-config-vol"}]}}}}
    creationTimestamp: "2021-01-21T00:07:25Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      component: gke-metrics-agent
      k8s-app: gke-metrics-agent
    name: gke-metrics-agent-windows
    namespace: kube-system
    resourceVersion: "430"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/gke-metrics-agent-windows
    uid: da16d78c-e3c6-44f6-9afd-738b71e3cd85
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        component: gke-metrics-agent
        k8s-app: gke-metrics-agent
    template:
      metadata:
        annotations:
          components.gke.io/component-name: gke-metrics-agent
          components.gke.io/component-version: 0.27.1
          configHash: hmTQNIDFihwy7g9QySAl44YTMBjYWKTwK28SlZ55hGQ=
        creationTimestamp: null
        labels:
          component: gke-metrics-agent
          k8s-app: gke-metrics-agent
      spec:
        containers:
        - command:
          - c:\otelsvc.exe
          - --config=/conf/gke-metrics-agent-config.yaml
          - --metrics-level=NONE
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBELET_HOST
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: KUBERNETES_SERVICE_HOST
            value: kubernetes.default.svc.cluster.local
          - name: ARG1
            value: ${1}
          - name: ARG2
            value: ${2}
          image: gcr.io/gke-release/gke-metrics-agent-windows:0.1.3-gke.0
          imagePullPolicy: IfNotPresent
          name: gke-metrics-agent
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 5m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /conf
            name: gke-metrics-agent-config-vol
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: windows
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gke-metrics-agent
        serviceAccountName: gke-metrics-agent
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 300
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 300
        - effect: NoSchedule
          key: node.kubernetes.io/os
          operator: Equal
          value: windows
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: gke-metrics-agent-config
              path: gke-metrics-agent-config.yaml
            name: gke-metrics-agent-conf
          name: gke-metrics-agent-config-vol
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0
    observedGeneration: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-proxy"},"name":"kube-proxy","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kube-proxy"}},"template":{"metadata":{"labels":{"k8s-app":"kube-proxy"}},"spec":{"containers":[{"command":["/bin/sh","-c","kube-proxy --cluster-cidr=10.108.0.0/14 --oom-score-adj=-998 --v=2 --feature-gates=DynamicKubeletConfig=false,TaintBasedEvictions=false,ServiceLoadBalancerFinalizer=true --iptables-sync-period=1m --iptables-min-sync-period=10s --ipvs-sync-period=1m --ipvs-min-sync-period=10s 1\u003e\u003e/var/log/kube-proxy.log 2\u003e\u00261"],"env":[{"name":"KUBERNETES_SERVICE_HOST","value":"35.245.235.41"}],"image":"gke.gcr.io/kube-proxy-amd64:v1.16.15-gke.6000","name":"kube-proxy","resources":{"requests":{"cpu":"100m"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/var/log","name":"varlog","readOnly":false},{"mountPath":"/run/xtables.lock","name":"xtables-lock","readOnly":false},{"mountPath":"/lib/modules","name":"lib-modules","readOnly":true}]}],"hostNetwork":true,"nodeSelector":{"beta.kubernetes.io/os":"linux","node.kubernetes.io/kube-proxy-ds-ready":"true"},"priorityClassName":"system-node-critical","serviceAccountName":"kube-proxy","tolerations":[{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/log"},"name":"varlog"},{"hostPath":{"path":"/run/xtables.lock","type":"FileOrCreate"},"name":"xtables-lock"},{"hostPath":{"path":"/lib/modules"},"name":"lib-modules"}]}},"updateStrategy":{"rollingUpdate":{"maxUnavailable":"10%"},"type":"RollingUpdate"}}}
    creationTimestamp: "2021-01-21T00:07:27Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "485"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy
    uid: cef02693-82ab-45f4-84ab-9b257ecc96ae
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - kube-proxy --cluster-cidr=10.108.0.0/14 --oom-score-adj=-998 --v=2 --feature-gates=DynamicKubeletConfig=false,TaintBasedEvictions=false,ServiceLoadBalancerFinalizer=true
            --iptables-sync-period=1m --iptables-min-sync-period=10s --ipvs-sync-period=1m
            --ipvs-min-sync-period=10s 1>>/var/log/kube-proxy.log 2>&1
          env:
          - name: KUBERNETES_SERVICE_HOST
            value: 35.245.235.41
          image: gke.gcr.io/kube-proxy-amd64:v1.16.15-gke.6000
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources:
            requests:
              cpu: 100m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
          node.kubernetes.io/kube-proxy-ds-ready: "true"
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0
    observedGeneration: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"metadata-proxy","kubernetes.io/cluster-service":"true","version":"v0.1"},"name":"metadata-proxy-v0.1","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"metadata-proxy","version":"v0.1"}},"template":{"metadata":{"labels":{"k8s-app":"metadata-proxy","kubernetes.io/cluster-service":"true","version":"v0.1"}},"spec":{"containers":[{"image":"k8s.gcr.io/metadata-proxy:v0.1.12","name":"metadata-proxy","resources":{"limits":{"cpu":"30m","memory":"25Mi"},"requests":{"cpu":"30m","memory":"25Mi"}},"securityContext":{"privileged":true}},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=metadata_proxy:http://127.0.0.1:989?whitelisted=request_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"k8s.gcr.io/prometheus-to-sd:v0.5.0","name":"prometheus-to-sd-exporter","resources":{"limits":{"cpu":"2m","memory":"20Mi"},"requests":{"cpu":"2m","memory":"20Mi"}}}],"dnsPolicy":"Default","hostNetwork":true,"nodeSelector":{"beta.kubernetes.io/os":"linux","cloud.google.com/metadata-proxy-ready":"true"},"priorityClassName":"system-node-critical","serviceAccountName":"metadata-proxy","terminationGracePeriodSeconds":30,"tolerations":[{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: "2021-01-21T00:07:21Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: metadata-proxy
      kubernetes.io/cluster-service: "true"
      version: v0.1
    name: metadata-proxy-v0.1
    namespace: kube-system
    resourceVersion: "352"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/metadata-proxy-v0.1
    uid: 06ece937-76e4-4091-9f86-178474d2f295
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metadata-proxy
        version: v0.1
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metadata-proxy
          kubernetes.io/cluster-service: "true"
          version: v0.1
      spec:
        containers:
        - image: k8s.gcr.io/metadata-proxy:v0.1.12
          imagePullPolicy: IfNotPresent
          name: metadata-proxy
          resources:
            limits:
              cpu: 30m
              memory: 25Mi
            requests:
              cpu: 30m
              memory: 25Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=metadata_proxy:http://127.0.0.1:989?whitelisted=request_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: k8s.gcr.io/prometheus-to-sd:v0.5.0
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources:
            limits:
              cpu: 2m
              memory: 20Mi
            requests:
              cpu: 2m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
          cloud.google.com/metadata-proxy-ready: "true"
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metadata-proxy
        serviceAccountName: metadata-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0
    observedGeneration: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"nvidia-gpu-device-plugin"},"name":"nvidia-gpu-device-plugin","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"nvidia-gpu-device-plugin"}},"template":{"metadata":{"labels":{"k8s-app":"nvidia-gpu-device-plugin"}},"spec":{"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"cloud.google.com/gke-accelerator","operator":"Exists"}]}]}}},"containers":[{"command":["/usr/bin/nvidia-gpu-device-plugin","-logtostderr"],"image":"k8s.gcr.io/nvidia-gpu-device-plugin@sha256:4b036e8844920336fa48f36edeb7d4398f426d6a934ba022848deed2edbf09aa","name":"nvidia-gpu-device-plugin","resources":{"limits":{"cpu":"50m","memory":"10Mi"},"requests":{"cpu":"50m","memory":"10Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/device-plugin","name":"device-plugin"},{"mountPath":"/dev","name":"dev"}]}],"priorityClassName":"system-node-critical","tolerations":[{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/lib/kubelet/device-plugins"},"name":"device-plugin"},{"hostPath":{"path":"/dev"},"name":"dev"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: "2021-01-21T00:07:24Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: nvidia-gpu-device-plugin
    name: nvidia-gpu-device-plugin
    namespace: kube-system
    resourceVersion: "390"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/nvidia-gpu-device-plugin
    uid: ce08e796-8bd7-4ebb-92a2-028aa56def53
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: nvidia-gpu-device-plugin
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: nvidia-gpu-device-plugin
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: cloud.google.com/gke-accelerator
                  operator: Exists
        containers:
        - command:
          - /usr/bin/nvidia-gpu-device-plugin
          - -logtostderr
          image: k8s.gcr.io/nvidia-gpu-device-plugin@sha256:4b036e8844920336fa48f36edeb7d4398f426d6a934ba022848deed2edbf09aa
          imagePullPolicy: IfNotPresent
          name: nvidia-gpu-device-plugin
          resources:
            limits:
              cpu: 50m
              memory: 10Mi
            requests:
              cpu: 50m
              memory: 10Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /device-plugin
            name: device-plugin
          - mountPath: /dev
            name: dev
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/device-plugins
            type: ""
          name: device-plugin
        - hostPath:
            path: /dev
            type: ""
          name: dev
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0
    observedGeneration: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","kubernetes.io/cluster-service":"true"},"name":"prometheus-to-sd","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"prometheus-to-sd"}},"template":{"metadata":{"labels":{"k8s-app":"prometheus-to-sd"}},"spec":{"containers":[{"command":["/monitor","--source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds\u0026metricsPrefix=container.googleapis.com/internal/addons","--source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,runtime_operations_latency_microseconds,pleg_relist_latency_microseconds,pod_start_latency_microseconds,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total,storage_operation_status_count","--source=kubelet:http://localhost:10255/metrics/probes?whitelisted=prober_probe_total\u0026podIdLabel=pod\u0026namespaceIdLabel=namespace\u0026containerNameLabel=container","--stackdriver-prefix=container.googleapis.com/internal/nodes","--api-override=https://monitoring.googleapis.com/"],"image":"k8s.gcr.io/prometheus-to-sd:v0.8.2","imagePullPolicy":"IfNotPresent","name":"prometheus-to-sd"}],"hostNetwork":true,"nodeSelector":{"beta.kubernetes.io/os":"linux"},"priorityClassName":"system-node-critical","serviceAccountName":"prometheus-to-sd","tolerations":[{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"},{"key":"components.gke.io/gke-managed-components","operator":"Exists"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: "2021-01-21T00:07:20Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      kubernetes.io/cluster-service: "true"
    name: prometheus-to-sd
    namespace: kube-system
    resourceVersion: "5177864"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/prometheus-to-sd
    uid: d742146e-7e88-494a-8cdf-bb505c392d96
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: prometheus-to-sd
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: prometheus-to-sd
      spec:
        containers:
        - command:
          - /monitor
          - --source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds&metricsPrefix=container.googleapis.com/internal/addons
          - --source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,runtime_operations_latency_microseconds,pleg_relist_latency_microseconds,pod_start_latency_microseconds,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total,storage_operation_status_count
          - --source=kubelet:http://localhost:10255/metrics/probes?whitelisted=prober_probe_total&podIdLabel=pod&namespaceIdLabel=namespace&containerNameLabel=container
          - --stackdriver-prefix=container.googleapis.com/internal/nodes
          - --api-override=https://monitoring.googleapis.com/
          image: k8s.gcr.io/prometheus-to-sd:v0.8.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: prometheus-to-sd
        serviceAccountName: prometheus-to-sd
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        - key: components.gke.io/gke-managed-components
          operator: Exists
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T05:23:57Z"
    generation: 5
    labels:
      app: carts
    name: carts
    namespace: default
    resourceVersion: "103195"
    selfLink: /apis/apps/v1/namespaces/default/deployments/carts
    uid: 41e335e3-4671-4b08-9615-b0fcf4414768
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: carts
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: carts
      spec:
        containers:
        - image: gouravshah/carts:latest
          imagePullPolicy: Always
          name: carts-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T05:23:57Z"
      lastUpdateTime: "2021-01-21T05:24:05Z"
      message: ReplicaSet "carts-6f9f47c568" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-21T05:47:56Z"
      lastUpdateTime: "2021-01-21T05:47:56Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T05:11:30Z"
    generation: 4
    labels:
      app: catalogue
    name: catalogue
    namespace: default
    resourceVersion: "96092"
    selfLink: /apis/apps/v1/namespaces/default/deployments/catalogue
    uid: 38f15638-adee-4180-b775-c093fe60914a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: catalogue
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: catalogue
      spec:
        containers:
        - image: gouravshah/catalogue:latest
          imagePullPolicy: Always
          name: catalogue-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T05:11:30Z"
      lastUpdateTime: "2021-01-21T05:11:53Z"
      message: ReplicaSet "catalogue-798b98f89d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-21T05:29:47Z"
      lastUpdateTime: "2021-01-21T05:29:47Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 4
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T05:08:27Z"
    generation: 2
    labels:
      app: catalogue-db
    name: catalogue-db
    namespace: default
    resourceVersion: "91260"
    selfLink: /apis/apps/v1/namespaces/default/deployments/catalogue-db
    uid: 56072183-e60c-469d-9211-5909a82adcbc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: catalogue-db
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: catalogue-db
      spec:
        containers:
        - env:
          - name: MYSQL_ALLOW_EMPTY_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: MYSQL_ALLOW_EMPTY_PASSWORD
                name: catalogue-db-config-6zx1
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                key: MYSQL_DATABASE
                name: catalogue-db-config-6zx1
          image: gouravshah/catalogue-db:latest
          imagePullPolicy: Always
          name: catalogue-db-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T05:08:40Z"
      lastUpdateTime: "2021-01-21T05:08:40Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T05:08:28Z"
      lastUpdateTime: "2021-01-21T05:08:40Z"
      message: ReplicaSet "catalogue-db-57795744" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2021-01-21T01:37:00Z"
    generation: 14
    labels:
      app: frontend
    name: frontend
    namespace: default
    resourceVersion: "1589098"
    selfLink: /apis/apps/v1/namespaces/default/deployments/frontend
    uid: fa75dc41-0ab8-4879-9987-c0fe1e523c45
  spec:
    minReadySeconds: 20
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: frontend
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: frontend
      spec:
        containers:
        - image: schoolofdevops/frontend:v3.0
          imagePullPolicy: Always
          name: frontend-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T01:37:00Z"
      lastUpdateTime: "2021-01-21T05:46:34Z"
      message: ReplicaSet "frontend-66d7fddc89" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-24T18:22:55Z"
      lastUpdateTime: "2021-01-24T18:22:55Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 14
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"hello-world","namespace":"helloworld"},"spec":{"replicas":2,"selector":{"matchLabels":{"run":"load-balancer-example"}},"template":{"metadata":{"labels":{"run":"load-balancer-example"}},"spec":{"containers":[{"image":"gcr.io/google-samples/node-hello:1.0","name":"hello-world","ports":[{"containerPort":8080,"protocol":"TCP"}]}]}}}}
    creationTimestamp: "2021-02-09T21:44:30Z"
    generation: 1
    name: hello-world
    namespace: helloworld
    resourceVersion: "8392007"
    selfLink: /apis/apps/v1/namespaces/helloworld/deployments/hello-world
    uid: d0cf5165-25c9-4b4e-8d5a-7793d842d73d
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        run: load-balancer-example
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          run: load-balancer-example
      spec:
        containers:
        - image: gcr.io/google-samples/node-hello:1.0
          imagePullPolicy: IfNotPresent
          name: hello-world
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-02-09T21:44:53Z"
      lastUpdateTime: "2021-02-09T21:44:53Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-02-09T21:44:30Z"
      lastUpdateTime: "2021-02-09T21:44:53Z"
      message: ReplicaSet "hello-world-77b74d7cc8" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"event-exporter","kubernetes.io/cluster-service":"true","version":"v0.3.4"},"name":"event-exporter-gke","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"event-exporter"}},"template":{"metadata":{"annotations":{"components.gke.io/component-name":"event-exporter","components.gke.io/component-version":"1.0.9"},"labels":{"k8s-app":"event-exporter","version":"v0.3.4"}},"spec":{"containers":[{"command":["/event-exporter","-sink-opts=-stackdriver-resource-model=new -endpoint=https://logging.googleapis.com","-prometheus-endpoint=:8080"],"image":"gke.gcr.io/event-exporter:v0.3.4-gke.0","name":"event-exporter","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]}}},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=event_exporter:http://localhost:8080?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)","--node-name=$(NODE_NAME)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}}],"image":"gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0","name":"prometheus-to-sd-exporter","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]}}}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsGroup":1000,"runAsUser":1000},"serviceAccountName":"event-exporter-sa","terminationGracePeriodSeconds":120,"tolerations":[{"key":"components.gke.io/gke-managed-components","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/etc/ssl/certs"},"name":"ssl-certs"}]}}}}
    creationTimestamp: "2021-01-21T00:07:21Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: event-exporter
      kubernetes.io/cluster-service: "true"
      version: v0.3.4
    name: event-exporter-gke
    namespace: kube-system
    resourceVersion: "1043"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/event-exporter-gke
    uid: 221fbe20-9c3e-4f68-80bb-5cb91c353f80
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: event-exporter
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          components.gke.io/component-name: event-exporter
          components.gke.io/component-version: 1.0.9
        creationTimestamp: null
        labels:
          k8s-app: event-exporter
          version: v0.3.4
      spec:
        containers:
        - command:
          - /event-exporter
          - -sink-opts=-stackdriver-resource-model=new -endpoint=https://logging.googleapis.com
          - -prometheus-endpoint=:8080
          image: gke.gcr.io/event-exporter:v0.3.4-gke.0
          imagePullPolicy: IfNotPresent
          name: event-exporter
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=event_exporter:http://localhost:8080?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          - --node-name=$(NODE_NAME)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 1000
          runAsUser: 1000
        serviceAccount: event-exporter-sa
        serviceAccountName: event-exporter-sa
        terminationGracePeriodSeconds: 120
        tolerations:
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: ""
          name: ssl-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T00:08:32Z"
      lastUpdateTime: "2021-01-21T00:08:32Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T00:07:21Z"
      lastUpdateTime: "2021-01-21T00:08:32Z"
      message: ReplicaSet "event-exporter-gke-666b7ffbf7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      components.gke.io/component-name: fluentd-scaler
      components.gke.io/component-version: 1.0.2
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"components.gke.io/component-name":"fluentd-scaler","components.gke.io/component-version":"1.0.2"},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"fluentd-gke-scaler"},"name":"fluentd-gke-scaler","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"fluentd-gke-scaler"}},"template":{"metadata":{"annotations":{"components.gke.io/component-name":"fluentd-scaler","components.gke.io/component-version":"1.0.2"},"labels":{"k8s-app":"fluentd-gke-scaler"}},"spec":{"containers":[{"command":["/scaler.sh","--ds-name=fluentd-gke","--scaling-policy=fluentd-gcp-scaling-policy"],"env":[{"name":"CPU_REQUEST","value":"100m"},{"name":"MEMORY_REQUEST","value":"200Mi"},{"name":"CPU_LIMIT","value":"1"},{"name":"MEMORY_LIMIT","value":"500Mi"}],"image":"gke.gcr.io/fluentd-gcp-scaler:0.5.4-gke.0","name":"fluentd-gke-scaler"}],"serviceAccountName":"fluentd-gke-scaler","tolerations":[{"key":"components.gke.io/gke-managed-components","operator":"Exists"}]}}}}
    creationTimestamp: "2021-01-21T00:07:24Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: fluentd-gke-scaler
    name: fluentd-gke-scaler
    namespace: kube-system
    resourceVersion: "1048"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/fluentd-gke-scaler
    uid: 71e49edf-049c-437d-8ccb-539ae721edd5
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: fluentd-gke-scaler
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          components.gke.io/component-name: fluentd-scaler
          components.gke.io/component-version: 1.0.2
        creationTimestamp: null
        labels:
          k8s-app: fluentd-gke-scaler
      spec:
        containers:
        - command:
          - /scaler.sh
          - --ds-name=fluentd-gke
          - --scaling-policy=fluentd-gcp-scaling-policy
          env:
          - name: CPU_REQUEST
            value: 100m
          - name: MEMORY_REQUEST
            value: 200Mi
          - name: CPU_LIMIT
            value: "1"
          - name: MEMORY_LIMIT
            value: 500Mi
          image: gke.gcr.io/fluentd-gcp-scaler:0.5.4-gke.0
          imagePullPolicy: IfNotPresent
          name: fluentd-gke-scaler
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: fluentd-gke-scaler
        serviceAccountName: fluentd-gke-scaler
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: components.gke.io/gke-managed-components
          operator: Exists
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T00:08:32Z"
      lastUpdateTime: "2021-01-21T00:08:32Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T00:07:24Z"
      lastUpdateTime: "2021-01-21T00:08:32Z"
      message: ReplicaSet "fluentd-gke-scaler-54796dcbf7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true"},"name":"kube-dns","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kube-dns"}},"strategy":{"rollingUpdate":{"maxSurge":"10%","maxUnavailable":0}},"template":{"metadata":{"annotations":{"components.gke.io/component-name":"kubedns","components.gke.io/component-version":"1.0.4","scheduler.alpha.kubernetes.io/critical-pod":"","seccomp.security.alpha.kubernetes.io/pod":"runtime/default"},"labels":{"k8s-app":"kube-dns"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"k8s-app","operator":"In","values":["kube-dns"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"containers":[{"args":["--domain=cluster.local.","--dns-port=10053","--config-dir=/kube-dns-config","--v=2"],"env":[{"name":"PROMETHEUS_PORT","value":"10055"}],"image":"gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.15-gke.0","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/healthcheck/kubedns","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"kubedns","ports":[{"containerPort":10053,"name":"dns-local","protocol":"UDP"},{"containerPort":10053,"name":"dns-tcp-local","protocol":"TCP"},{"containerPort":10055,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readiness","port":8081,"scheme":"HTTP"},"initialDelaySeconds":3,"timeoutSeconds":5},"resources":{"limits":{"memory":"210Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":1001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/kube-dns-config","name":"kube-dns-config"}]},{"args":["-v=2","-logtostderr","-configDir=/etc/k8s/dns/dnsmasq-nanny","-restartDnsmasq=true","--","-k","--cache-size=1000","--no-negcache","--dns-forward-max=1500","--log-facility=-","--server=/cluster.local/127.0.0.1#10053","--server=/in-addr.arpa/127.0.0.1#10053","--server=/ip6.arpa/127.0.0.1#10053"],"image":"gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.15-gke.0","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/healthcheck/dnsmasq","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"dnsmasq","ports":[{"containerPort":53,"name":"dns","protocol":"UDP"},{"containerPort":53,"name":"dns-tcp","protocol":"TCP"}],"resources":{"requests":{"cpu":"150m","memory":"20Mi"}},"securityContext":{"capabilities":{"add":["NET_BIND_SERVICE","SETGID"],"drop":["all"]}},"volumeMounts":[{"mountPath":"/etc/k8s/dns/dnsmasq-nanny","name":"kube-dns-config"}]},{"args":["--v=2","--logtostderr","--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV","--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV"],"image":"gke.gcr.io/k8s-dns-sidecar-amd64:1.15.15-gke.0","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/metrics","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"sidecar","ports":[{"containerPort":10054,"name":"metrics","protocol":"TCP"}],"resources":{"requests":{"cpu":"10m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":1001,"runAsUser":1001}},{"command":["/monitor","--source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)","--v=2"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gke.gcr.io/prometheus-to-sd:v0.4.2","name":"prometheus-to-sd","securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":1001,"runAsUser":1001}}],"dnsPolicy":"Default","nodeSelector":{"beta.kubernetes.io/os":"linux"},"priorityClassName":"system-cluster-critical","securityContext":{"fsGroup":65534,"supplementalGroups":[65534]},"serviceAccountName":"kube-dns","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"},{"key":"components.gke.io/gke-managed-components","operator":"Exists"}],"volumes":[{"configMap":{"name":"kube-dns","optional":true},"name":"kube-dns-config"}]}}}}
    creationTimestamp: "2021-01-21T00:07:21Z"
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
    name: kube-dns
    namespace: kube-system
    resourceVersion: "971"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/kube-dns
    uid: ee13945e-9b1f-4515-bed2-d5c98e6eecf7
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 10%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          components.gke.io/component-name: kubedns
          components.gke.io/component-version: 1.0.4
          scheduler.alpha.kubernetes.io/critical-pod: ""
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - --domain=cluster.local.
          - --dns-port=10053
          - --config-dir=/kube-dns-config
          - --v=2
          env:
          - name: PROMETHEUS_PORT
            value: "10055"
          image: gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.15-gke.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/kubedns
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kubedns
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
          - containerPort: 10055
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: 210Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kube-dns-config
            name: kube-dns-config
        - args:
          - -v=2
          - -logtostderr
          - -configDir=/etc/k8s/dns/dnsmasq-nanny
          - -restartDnsmasq=true
          - --
          - -k
          - --cache-size=1000
          - --no-negcache
          - --dns-forward-max=1500
          - --log-facility=-
          - --server=/cluster.local/127.0.0.1#10053
          - --server=/in-addr.arpa/127.0.0.1#10053
          - --server=/ip6.arpa/127.0.0.1#10053
          image: gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.15-gke.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/dnsmasq
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: dnsmasq
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          resources:
            requests:
              cpu: 150m
              memory: 20Mi
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
              - SETGID
              drop:
              - all
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/k8s/dns/dnsmasq-nanny
            name: kube-dns-config
        - args:
          - --v=2
          - --logtostderr
          - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
          - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
          image: gke.gcr.io/k8s-dns-sidecar-amd64:1.15.15-gke.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sidecar
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          - --v=2
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gke.gcr.io/prometheus-to-sd:v0.4.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          supplementalGroups:
          - 65534
        serviceAccount: kube-dns
        serviceAccountName: kube-dns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-dns
            optional: true
          name: kube-dns-config
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-01-21T00:08:17Z"
      lastUpdateTime: "2021-01-21T00:08:17Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T00:07:21Z"
      lastUpdateTime: "2021-01-21T00:08:17Z"
      message: ReplicaSet "kube-dns-66d6b7c877" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns-autoscaler","kubernetes.io/cluster-service":"true"},"name":"kube-dns-autoscaler","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kube-dns-autoscaler"}},"template":{"metadata":{"annotations":{"seccomp.security.alpha.kubernetes.io/pod":"docker/default"},"labels":{"k8s-app":"kube-dns-autoscaler"}},"spec":{"containers":[{"command":["/cluster-proportional-autoscaler","--namespace=kube-system","--configmap=kube-dns-autoscaler","--target=Deployment/kube-dns","--default-params={\"linear\":{\"coresPerReplica\":256,\"nodesPerReplica\":16,\"preventSinglePointFailure\":true}}","--logtostderr=true","--v=2"],"image":"gke.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1-gke.0","name":"autoscaler","resources":{"requests":{"cpu":"20m","memory":"10Mi"}}}],"nodeSelector":{"beta.kubernetes.io/os":"linux"},"priorityClassName":"system-cluster-critical","securityContext":{"fsGroup":65534,"supplementalGroups":[65534]},"serviceAccountName":"kube-dns-autoscaler","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}]}}}}
    creationTimestamp: "2021-01-21T00:07:20Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns-autoscaler
      kubernetes.io/cluster-service: "true"
    name: kube-dns-autoscaler
    namespace: kube-system
    resourceVersion: "1051"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/kube-dns-autoscaler
    uid: b5339027-070f-4fd6-9ed6-b31e7ebf2c9c
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns-autoscaler
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: docker/default
        creationTimestamp: null
        labels:
          k8s-app: kube-dns-autoscaler
      spec:
        containers:
        - command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=kube-dns-autoscaler
          - --target=Deployment/kube-dns
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
          - --logtostderr=true
          - --v=2
          image: gke.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1-gke.0
          imagePullPolicy: IfNotPresent
          name: autoscaler
          resources:
            requests:
              cpu: 20m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          supplementalGroups:
          - 65534
        serviceAccount: kube-dns-autoscaler
        serviceAccountName: kube-dns-autoscaler
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T00:08:32Z"
      lastUpdateTime: "2021-01-21T00:08:32Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T00:07:20Z"
      lastUpdateTime: "2021-01-21T00:08:32Z"
      message: ReplicaSet "kube-dns-autoscaler-645f7d66cf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"glbc","kubernetes.io/cluster-service":"true","kubernetes.io/name":"GLBC"},"name":"l7-default-backend","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"glbc"}},"template":{"metadata":{"annotations":{"seccomp.security.alpha.kubernetes.io/pod":"docker/default"},"labels":{"k8s-app":"glbc","name":"glbc"}},"spec":{"containers":[{"image":"k8s.gcr.io/ingress-gce-404-server-with-metrics-amd64:v1.6.0","livenessProbe":{"httpGet":{"path":"/healthz","port":8080,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":5},"name":"default-http-backend","ports":[{"containerPort":8080}],"resources":{"limits":{"cpu":"10m","memory":"20Mi"},"requests":{"cpu":"10m","memory":"20Mi"}}}]}}}}
    creationTimestamp: "2021-01-21T00:07:20Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: glbc
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: GLBC
    name: l7-default-backend
    namespace: kube-system
    resourceVersion: "1287"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/l7-default-backend
    uid: 62691d0b-1bd8-4030-b756-5c526b989ead
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: glbc
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: docker/default
        creationTimestamp: null
        labels:
          k8s-app: glbc
          name: glbc
      spec:
        containers:
        - image: k8s.gcr.io/ingress-gce-404-server-with-metrics-amd64:v1.6.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-http-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T00:09:14Z"
      lastUpdateTime: "2021-01-21T00:09:14Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T00:07:20Z"
      lastUpdateTime: "2021-01-21T00:09:14Z"
      message: ReplicaSet "l7-default-backend-678889f899" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"metrics-server","kubernetes.io/cluster-service":"true","version":"v0.3.6"},"name":"metrics-server-v0.3.6","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"metrics-server","version":"v0.3.6"}},"template":{"metadata":{"annotations":{"seccomp.security.alpha.kubernetes.io/pod":"docker/default"},"labels":{"k8s-app":"metrics-server","version":"v0.3.6"},"name":"metrics-server"},"spec":{"containers":[{"command":["/metrics-server","--metric-resolution=30s","--kubelet-port=10255","--deprecated-kubelet-completely-insecure=true","--kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP"],"image":"k8s.gcr.io/metrics-server-amd64:v0.3.6","name":"metrics-server","ports":[{"containerPort":443,"name":"https","protocol":"TCP"}]},{"command":["/pod_nanny","--config-dir=/etc/config","--cpu=40m","--extra-cpu=0.5m","--memory=35Mi","--extra-memory=4Mi","--threshold=5","--deployment=metrics-server-v0.3.6","--container=metrics-server","--poll-period=300000","--estimator=exponential","--scale-down-delay=24h","--minClusterSize=5"],"env":[{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gke.gcr.io/addon-resizer:1.8.8-gke.1","name":"metrics-server-nanny","resources":{"limits":{"cpu":"100m","memory":"300Mi"},"requests":{"cpu":"5m","memory":"50Mi"}},"volumeMounts":[{"mountPath":"/etc/config","name":"metrics-server-config-volume"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"priorityClassName":"system-cluster-critical","serviceAccountName":"metrics-server","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"name":"metrics-server-config"},"name":"metrics-server-config-volume"}]}}}}
    creationTimestamp: "2021-01-21T00:07:22Z"
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: metrics-server
      kubernetes.io/cluster-service: "true"
      version: v0.3.6
    name: metrics-server-v0.3.6
    namespace: kube-system
    resourceVersion: "1071"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/metrics-server-v0.3.6
    uid: 33f500d0-e4b8-4bef-96a9-90ed6ebde3ac
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metrics-server
        version: v0.3.6
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: docker/default
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          version: v0.3.6
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --metric-resolution=30s
          - --kubelet-port=10255
          - --deprecated-kubelet-completely-insecure=true
          - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
          image: k8s.gcr.io/metrics-server-amd64:v0.3.6
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 43m
              memory: 55Mi
            requests:
              cpu: 43m
              memory: 55Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=35Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.3.6
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          - --scale-down-delay=24h
          - --minClusterSize=5
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gke.gcr.io/addon-resizer:1.8.8-gke.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T00:07:52Z"
      lastUpdateTime: "2021-01-21T00:07:52Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T00:07:22Z"
      lastUpdateTime: "2021-01-21T00:08:33Z"
      message: ReplicaSet "metrics-server-v0.3.6-64655c969" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"stackdriver-metadata-agent","kubernetes.io/cluster-service":"true"},"name":"stackdriver-metadata-agent-cluster-level","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"stackdriver-metadata-agent","cluster-level":"true"}},"strategy":{"rollingUpdate":{"maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"components.gke.io/component-name":"stackdriver-metadata-agent","components.gke.io/component-version":"1.1.4"},"labels":{"app":"stackdriver-metadata-agent","cluster-level":"true"}},"spec":{"containers":[{"args":["-logtostderr","-v=1"],"env":[{"name":"CLUSTER_NAME","value":"us-east-gke"},{"name":"CLUSTER_LOCATION","value":"us-east4-b"},{"name":"IGNORED_RESOURCES","value":"replicasets.v1.apps,replicasets.v1beta1.extensions"}],"image":"gcr.io/stackdriver-agents/metadata-agent-go:1.2.0","imagePullPolicy":"IfNotPresent","name":"metadata-agent","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/etc/ssl/certs","name":"ssl-certs"}]},{"command":["/pod_nanny","--config-dir=/etc/config","--cpu=40m","--extra-cpu=0.5m","--memory=80Mi","--extra-memory=2Mi","--threshold=5","--deployment=stackdriver-metadata-agent-cluster-level","--container=metadata-agent","--poll-period=300000","--estimator=exponential","--minClusterSize=16","--use-metrics=true"],"env":[{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gke.gcr.io/addon-resizer:1.8.11-gke.1","name":"metadata-agent-nanny","resources":{"limits":{"memory":"90Mi"},"requests":{"cpu":"50m","memory":"90Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000},"volumeMounts":[{"mountPath":"/etc/config","name":"metadata-agent-config-volume"}]}],"dnsPolicy":"ClusterFirst","priorityClassName":"system-cluster-critical","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"serviceAccountName":"metadata-agent","terminationGracePeriodSeconds":5,"tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"},{"key":"components.gke.io/gke-managed-components","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/etc/ssl/certs","type":"Directory"},"name":"ssl-certs"},{"configMap":{"name":"metadata-agent-config"},"name":"metadata-agent-config-volume"}]}}}}
    creationTimestamp: "2021-01-21T00:07:21Z"
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      app: stackdriver-metadata-agent
      kubernetes.io/cluster-service: "true"
    name: stackdriver-metadata-agent-cluster-level
    namespace: kube-system
    resourceVersion: "924"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/stackdriver-metadata-agent-cluster-level
    uid: d522fccd-8e61-4b6a-83b8-251ec3dde39e
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: stackdriver-metadata-agent
        cluster-level: "true"
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          components.gke.io/component-name: stackdriver-metadata-agent
          components.gke.io/component-version: 1.1.4
        creationTimestamp: null
        labels:
          app: stackdriver-metadata-agent
          cluster-level: "true"
      spec:
        containers:
        - args:
          - -logtostderr
          - -v=1
          env:
          - name: CLUSTER_NAME
            value: us-east-gke
          - name: CLUSTER_LOCATION
            value: us-east4-b
          - name: IGNORED_RESOURCES
            value: replicasets.v1.apps,replicasets.v1beta1.extensions
          image: gcr.io/stackdriver-agents/metadata-agent-go:1.2.0
          imagePullPolicy: IfNotPresent
          name: metadata-agent
          resources:
            limits:
              cpu: 48m
              memory: 112Mi
            requests:
              cpu: 48m
              memory: 112Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: ssl-certs
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=80Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=stackdriver-metadata-agent-cluster-level
          - --container=metadata-agent
          - --poll-period=300000
          - --estimator=exponential
          - --minClusterSize=16
          - --use-metrics=true
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gke.gcr.io/addon-resizer:1.8.11-gke.1
          imagePullPolicy: IfNotPresent
          name: metadata-agent-nanny
          resources:
            limits:
              memory: 90Mi
            requests:
              cpu: 50m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metadata-agent-config-volume
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metadata-agent
        serviceAccountName: metadata-agent
        terminationGracePeriodSeconds: 5
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: Directory
          name: ssl-certs
        - configMap:
            defaultMode: 420
            name: metadata-agent-config
          name: metadata-agent-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-21T00:07:21Z"
      lastUpdateTime: "2021-01-21T00:07:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T00:07:21Z"
      lastUpdateTime: "2021-01-21T00:08:10Z"
      message: ReplicaSet "stackdriver-metadata-agent-cluster-level-846b7bccf" has
        successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: mongo
      meta.helm.sh/release-namespace: mongodb
    creationTimestamp: "2021-01-26T06:32:14Z"
    generation: 1
    labels:
      app: mongodb
      app.kubernetes.io/managed-by: Helm
      chart: mongodb-7.8.10
      heritage: Helm
      release: mongo
    name: mongo-mongodb
    namespace: mongodb
    resourceVersion: "2222772"
    selfLink: /apis/apps/v1/namespaces/mongodb/deployments/mongo-mongodb
    uid: 4b00d558-77cd-41e2-8313-0fc4275044df
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: mongodb
        release: mongo
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mongodb
          chart: mongodb-7.8.10
          release: mongo
      spec:
        containers:
        - env:
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password
                name: mongo-mongodb
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: "0"
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: "no"
          - name: MONGODB_ENABLE_IPV6
            value: "no"
          - name: MONGODB_ENABLE_DIRECTORY_PER_DB
            value: "no"
          image: docker.io/bitnami/mongodb:4.2.4-debian-10-r0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - mongo
              - --eval
              - db.adminCommand('ping')
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: mongo-mongodb
          ports:
          - containerPort: 27017
            name: mongodb
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - mongo
              - --eval
              - db.adminCommand('ping')
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        terminationGracePeriodSeconds: 30
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mongo-mongodb
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-26T06:32:48Z"
      lastUpdateTime: "2021-01-26T06:32:48Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-26T06:32:15Z"
      lastUpdateTime: "2021-01-26T06:32:48Z"
      message: ReplicaSet "mongo-mongodb-87b788c88" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T05:23:57Z"
    generation: 5
    labels:
      app: carts
      pod-template-hash: 6f9f47c568
    name: carts-6f9f47c568
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: carts
      uid: 41e335e3-4671-4b08-9615-b0fcf4414768
    resourceVersion: "103194"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/carts-6f9f47c568
    uid: 186d368c-ab08-4496-9299-0a3123e7453e
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: carts
        pod-template-hash: 6f9f47c568
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: carts
          pod-template-hash: 6f9f47c568
      spec:
        containers:
        - image: gouravshah/carts:latest
          imagePullPolicy: Always
          name: carts-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T05:11:30Z"
    generation: 4
    labels:
      app: catalogue
      pod-template-hash: 798b98f89d
    name: catalogue-798b98f89d
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: catalogue
      uid: 38f15638-adee-4180-b775-c093fe60914a
    resourceVersion: "96090"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/catalogue-798b98f89d
    uid: a4a5f090-1258-4efa-9dc4-70aa9e568ec7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: catalogue
        pod-template-hash: 798b98f89d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: catalogue
          pod-template-hash: 798b98f89d
      spec:
        containers:
        - image: gouravshah/catalogue:latest
          imagePullPolicy: Always
          name: catalogue-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 4
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T05:08:28Z"
    generation: 2
    labels:
      app: catalogue-db
      pod-template-hash: "57795744"
    name: catalogue-db-57795744
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: catalogue-db
      uid: 56072183-e60c-469d-9211-5909a82adcbc
    resourceVersion: "91259"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/catalogue-db-57795744
    uid: 147c7b6d-612c-4dfd-a168-1aec7d4eebc4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: catalogue-db
        pod-template-hash: "57795744"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: catalogue-db
          pod-template-hash: "57795744"
      spec:
        containers:
        - env:
          - name: MYSQL_ALLOW_EMPTY_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: MYSQL_ALLOW_EMPTY_PASSWORD
                name: catalogue-db-config-6zx1
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                key: MYSQL_DATABASE
                name: catalogue-db-config-6zx1
          image: gouravshah/catalogue-db:latest
          imagePullPolicy: Always
          name: catalogue-db-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2021-01-21T05:45:07Z"
    generation: 10
    labels:
      app: frontend
      pod-template-hash: 66d7fddc89
    name: frontend-66d7fddc89
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: frontend
      uid: fa75dc41-0ab8-4879-9987-c0fe1e523c45
    resourceVersion: "1589097"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/frontend-66d7fddc89
    uid: b1593686-3b58-4b13-a7ee-a555405a3148
  spec:
    minReadySeconds: 20
    replicas: 1
    selector:
      matchLabels:
        app: frontend
        pod-template-hash: 66d7fddc89
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: frontend
          pod-template-hash: 66d7fddc89
      spec:
        containers:
        - image: schoolofdevops/frontend:v3.0
          imagePullPolicy: Always
          name: frontend-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 10
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "5"
      deployment.kubernetes.io/max-replicas: "6"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T01:37:00Z"
    generation: 10
    labels:
      app: frontend
      pod-template-hash: 844668685f
    name: frontend-844668685f
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: frontend
      uid: fa75dc41-0ab8-4879-9987-c0fe1e523c45
    resourceVersion: "101039"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/frontend-844668685f
    uid: c1711213-9197-42a6-8c78-752eaa1020cc
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: frontend
        pod-template-hash: 844668685f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: frontend
          pod-template-hash: 844668685f
      spec:
        containers:
        - image: gouravshah/frontend:latest
          imagePullPolicy: Always
          name: frontend-1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 10
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-02-09T21:44:30Z"
    generation: 1
    labels:
      pod-template-hash: 77b74d7cc8
      run: load-balancer-example
    name: hello-world-77b74d7cc8
    namespace: helloworld
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hello-world
      uid: d0cf5165-25c9-4b4e-8d5a-7793d842d73d
    resourceVersion: "8392006"
    selfLink: /apis/apps/v1/namespaces/helloworld/replicasets/hello-world-77b74d7cc8
    uid: 91b1d1ef-f9c9-4779-9be1-7e895f0d14ae
  spec:
    replicas: 2
    selector:
      matchLabels:
        pod-template-hash: 77b74d7cc8
        run: load-balancer-example
    template:
      metadata:
        creationTimestamp: null
        labels:
          pod-template-hash: 77b74d7cc8
          run: load-balancer-example
      spec:
        containers:
        - image: gcr.io/google-samples/node-hello:1.0
          imagePullPolicy: IfNotPresent
          name: hello-world
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T00:07:21Z"
    generation: 1
    labels:
      k8s-app: event-exporter
      pod-template-hash: 666b7ffbf7
      version: v0.3.4
    name: event-exporter-gke-666b7ffbf7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: event-exporter-gke
      uid: 221fbe20-9c3e-4f68-80bb-5cb91c353f80
    resourceVersion: "1042"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/event-exporter-gke-666b7ffbf7
    uid: 53ab190d-7f79-47e0-94f9-186fc91ce4b2
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: event-exporter
        pod-template-hash: 666b7ffbf7
    template:
      metadata:
        annotations:
          components.gke.io/component-name: event-exporter
          components.gke.io/component-version: 1.0.9
        creationTimestamp: null
        labels:
          k8s-app: event-exporter
          pod-template-hash: 666b7ffbf7
          version: v0.3.4
      spec:
        containers:
        - command:
          - /event-exporter
          - -sink-opts=-stackdriver-resource-model=new -endpoint=https://logging.googleapis.com
          - -prometheus-endpoint=:8080
          image: gke.gcr.io/event-exporter:v0.3.4-gke.0
          imagePullPolicy: IfNotPresent
          name: event-exporter
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=event_exporter:http://localhost:8080?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          - --node-name=$(NODE_NAME)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: gke.gcr.io/prometheus-to-sd:v0.10.0-gke.0
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 1000
          runAsUser: 1000
        serviceAccount: event-exporter-sa
        serviceAccountName: event-exporter-sa
        terminationGracePeriodSeconds: 120
        tolerations:
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: ""
          name: ssl-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      components.gke.io/component-name: fluentd-scaler
      components.gke.io/component-version: 1.0.2
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T00:07:24Z"
    generation: 1
    labels:
      k8s-app: fluentd-gke-scaler
      pod-template-hash: 54796dcbf7
    name: fluentd-gke-scaler-54796dcbf7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: fluentd-gke-scaler
      uid: 71e49edf-049c-437d-8ccb-539ae721edd5
    resourceVersion: "1046"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/fluentd-gke-scaler-54796dcbf7
    uid: 4b81d74d-e2d5-4117-9ae7-8d2f90cd4bb0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: fluentd-gke-scaler
        pod-template-hash: 54796dcbf7
    template:
      metadata:
        annotations:
          components.gke.io/component-name: fluentd-scaler
          components.gke.io/component-version: 1.0.2
        creationTimestamp: null
        labels:
          k8s-app: fluentd-gke-scaler
          pod-template-hash: 54796dcbf7
      spec:
        containers:
        - command:
          - /scaler.sh
          - --ds-name=fluentd-gke
          - --scaling-policy=fluentd-gcp-scaling-policy
          env:
          - name: CPU_REQUEST
            value: 100m
          - name: MEMORY_REQUEST
            value: 200Mi
          - name: CPU_LIMIT
            value: "1"
          - name: MEMORY_LIMIT
            value: 500Mi
          image: gke.gcr.io/fluentd-gcp-scaler:0.5.4-gke.0
          imagePullPolicy: IfNotPresent
          name: fluentd-gke-scaler
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: fluentd-gke-scaler
        serviceAccountName: fluentd-gke-scaler
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: components.gke.io/gke-managed-components
          operator: Exists
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T00:07:21Z"
    generation: 2
    labels:
      k8s-app: kube-dns
      pod-template-hash: 66d6b7c877
    name: kube-dns-66d6b7c877
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-dns
      uid: ee13945e-9b1f-4515-bed2-d5c98e6eecf7
    resourceVersion: "969"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/kube-dns-66d6b7c877
    uid: 45907e18-26d1-4d3d-bf46-809b606bdbe1
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: 66d6b7c877
    template:
      metadata:
        annotations:
          components.gke.io/component-name: kubedns
          components.gke.io/component-version: 1.0.4
          scheduler.alpha.kubernetes.io/critical-pod: ""
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: 66d6b7c877
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - --domain=cluster.local.
          - --dns-port=10053
          - --config-dir=/kube-dns-config
          - --v=2
          env:
          - name: PROMETHEUS_PORT
            value: "10055"
          image: gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.15-gke.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/kubedns
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kubedns
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
          - containerPort: 10055
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: 210Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kube-dns-config
            name: kube-dns-config
        - args:
          - -v=2
          - -logtostderr
          - -configDir=/etc/k8s/dns/dnsmasq-nanny
          - -restartDnsmasq=true
          - --
          - -k
          - --cache-size=1000
          - --no-negcache
          - --dns-forward-max=1500
          - --log-facility=-
          - --server=/cluster.local/127.0.0.1#10053
          - --server=/in-addr.arpa/127.0.0.1#10053
          - --server=/ip6.arpa/127.0.0.1#10053
          image: gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.15-gke.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/dnsmasq
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: dnsmasq
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          resources:
            requests:
              cpu: 150m
              memory: 20Mi
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
              - SETGID
              drop:
              - all
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/k8s/dns/dnsmasq-nanny
            name: kube-dns-config
        - args:
          - --v=2
          - --logtostderr
          - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
          - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
          image: gke.gcr.io/k8s-dns-sidecar-amd64:1.15.15-gke.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sidecar
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          - --v=2
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gke.gcr.io/prometheus-to-sd:v0.4.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          supplementalGroups:
          - 65534
        serviceAccount: kube-dns
        serviceAccountName: kube-dns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-dns
            optional: true
          name: kube-dns-config
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T00:07:20Z"
    generation: 1
    labels:
      k8s-app: kube-dns-autoscaler
      pod-template-hash: 645f7d66cf
    name: kube-dns-autoscaler-645f7d66cf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-dns-autoscaler
      uid: b5339027-070f-4fd6-9ed6-b31e7ebf2c9c
    resourceVersion: "1050"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/kube-dns-autoscaler-645f7d66cf
    uid: 47d3f1b8-1691-4073-a7c7-ab0aaa74cc80
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-dns-autoscaler
        pod-template-hash: 645f7d66cf
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: docker/default
        creationTimestamp: null
        labels:
          k8s-app: kube-dns-autoscaler
          pod-template-hash: 645f7d66cf
      spec:
        containers:
        - command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=kube-dns-autoscaler
          - --target=Deployment/kube-dns
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
          - --logtostderr=true
          - --v=2
          image: gke.gcr.io/cluster-proportional-autoscaler-amd64:1.7.1-gke.0
          imagePullPolicy: IfNotPresent
          name: autoscaler
          resources:
            requests:
              cpu: 20m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          supplementalGroups:
          - 65534
        serviceAccount: kube-dns-autoscaler
        serviceAccountName: kube-dns-autoscaler
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T00:07:20Z"
    generation: 1
    labels:
      k8s-app: glbc
      name: glbc
      pod-template-hash: 678889f899
    name: l7-default-backend-678889f899
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: l7-default-backend
      uid: 62691d0b-1bd8-4030-b756-5c526b989ead
    resourceVersion: "1285"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/l7-default-backend-678889f899
    uid: 57284c33-ad3d-4c04-8724-791a6e03871b
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: glbc
        pod-template-hash: 678889f899
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: docker/default
        creationTimestamp: null
        labels:
          k8s-app: glbc
          name: glbc
          pod-template-hash: 678889f899
      spec:
        containers:
        - image: k8s.gcr.io/ingress-gce-404-server-with-metrics-amd64:v1.6.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-http-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2021-01-21T00:07:51Z"
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: 64655c969
      version: v0.3.6
    name: metrics-server-v0.3.6-64655c969
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server-v0.3.6
      uid: 33f500d0-e4b8-4bef-96a9-90ed6ebde3ac
    resourceVersion: "1062"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/metrics-server-v0.3.6-64655c969
    uid: 174a2440-c160-4cc9-811b-9eae79e7d2f3
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: 64655c969
        version: v0.3.6
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: docker/default
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: 64655c969
          version: v0.3.6
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --metric-resolution=30s
          - --kubelet-port=10255
          - --deprecated-kubelet-completely-insecure=true
          - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
          image: k8s.gcr.io/metrics-server-amd64:v0.3.6
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 43m
              memory: 55Mi
            requests:
              cpu: 43m
              memory: 55Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=35Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.3.6
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          - --scale-down-delay=24h
          - --minClusterSize=5
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gke.gcr.io/addon-resizer:1.8.8-gke.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T00:07:22Z"
    generation: 2
    labels:
      k8s-app: metrics-server
      pod-template-hash: 69fbfcd8b9
      version: v0.3.6
    name: metrics-server-v0.3.6-69fbfcd8b9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server-v0.3.6
      uid: 33f500d0-e4b8-4bef-96a9-90ed6ebde3ac
    resourceVersion: "1070"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/metrics-server-v0.3.6-69fbfcd8b9
    uid: 0eed110f-947b-4008-8aed-82a662886eda
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: 69fbfcd8b9
        version: v0.3.6
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: docker/default
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: 69fbfcd8b9
          version: v0.3.6
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --metric-resolution=30s
          - --kubelet-port=10255
          - --deprecated-kubelet-completely-insecure=true
          - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
          image: k8s.gcr.io/metrics-server-amd64:v0.3.6
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=35Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.3.6
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          - --scale-down-delay=24h
          - --minClusterSize=5
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gke.gcr.io/addon-resizer:1.8.8-gke.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T00:07:21Z"
    generation: 2
    labels:
      app: stackdriver-metadata-agent
      cluster-level: "true"
      pod-template-hash: 7dcd948ccf
    name: stackdriver-metadata-agent-cluster-level-7dcd948ccf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: stackdriver-metadata-agent-cluster-level
      uid: d522fccd-8e61-4b6a-83b8-251ec3dde39e
    resourceVersion: "860"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/stackdriver-metadata-agent-cluster-level-7dcd948ccf
    uid: e5279d63-0414-4008-a119-a57c5e4d3b66
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: stackdriver-metadata-agent
        cluster-level: "true"
        pod-template-hash: 7dcd948ccf
    template:
      metadata:
        annotations:
          components.gke.io/component-name: stackdriver-metadata-agent
          components.gke.io/component-version: 1.1.4
        creationTimestamp: null
        labels:
          app: stackdriver-metadata-agent
          cluster-level: "true"
          pod-template-hash: 7dcd948ccf
      spec:
        containers:
        - args:
          - -logtostderr
          - -v=1
          env:
          - name: CLUSTER_NAME
            value: us-east-gke
          - name: CLUSTER_LOCATION
            value: us-east4-b
          - name: IGNORED_RESOURCES
            value: replicasets.v1.apps,replicasets.v1beta1.extensions
          image: gcr.io/stackdriver-agents/metadata-agent-go:1.2.0
          imagePullPolicy: IfNotPresent
          name: metadata-agent
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: ssl-certs
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=80Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=stackdriver-metadata-agent-cluster-level
          - --container=metadata-agent
          - --poll-period=300000
          - --estimator=exponential
          - --minClusterSize=16
          - --use-metrics=true
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gke.gcr.io/addon-resizer:1.8.11-gke.1
          imagePullPolicy: IfNotPresent
          name: metadata-agent-nanny
          resources:
            limits:
              memory: 90Mi
            requests:
              cpu: 50m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metadata-agent-config-volume
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metadata-agent
        serviceAccountName: metadata-agent
        terminationGracePeriodSeconds: 5
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: Directory
          name: ssl-certs
        - configMap:
            defaultMode: 420
            name: metadata-agent-config
          name: metadata-agent-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2021-01-21T00:08:02Z"
    generation: 1
    labels:
      app: stackdriver-metadata-agent
      cluster-level: "true"
      pod-template-hash: 846b7bccf
    name: stackdriver-metadata-agent-cluster-level-846b7bccf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: stackdriver-metadata-agent-cluster-level
      uid: d522fccd-8e61-4b6a-83b8-251ec3dde39e
    resourceVersion: "923"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/stackdriver-metadata-agent-cluster-level-846b7bccf
    uid: 3cef6ef9-34a4-4789-9ff7-2b1060e71d97
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: stackdriver-metadata-agent
        cluster-level: "true"
        pod-template-hash: 846b7bccf
    template:
      metadata:
        annotations:
          components.gke.io/component-name: stackdriver-metadata-agent
          components.gke.io/component-version: 1.1.4
        creationTimestamp: null
        labels:
          app: stackdriver-metadata-agent
          cluster-level: "true"
          pod-template-hash: 846b7bccf
      spec:
        containers:
        - args:
          - -logtostderr
          - -v=1
          env:
          - name: CLUSTER_NAME
            value: us-east-gke
          - name: CLUSTER_LOCATION
            value: us-east4-b
          - name: IGNORED_RESOURCES
            value: replicasets.v1.apps,replicasets.v1beta1.extensions
          image: gcr.io/stackdriver-agents/metadata-agent-go:1.2.0
          imagePullPolicy: IfNotPresent
          name: metadata-agent
          resources:
            limits:
              cpu: 48m
              memory: 112Mi
            requests:
              cpu: 48m
              memory: 112Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: ssl-certs
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=80Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=stackdriver-metadata-agent-cluster-level
          - --container=metadata-agent
          - --poll-period=300000
          - --estimator=exponential
          - --minClusterSize=16
          - --use-metrics=true
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gke.gcr.io/addon-resizer:1.8.11-gke.1
          imagePullPolicy: IfNotPresent
          name: metadata-agent-nanny
          resources:
            limits:
              memory: 90Mi
            requests:
              cpu: 50m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metadata-agent-config-volume
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metadata-agent
        serviceAccountName: metadata-agent
        terminationGracePeriodSeconds: 5
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: components.gke.io/gke-managed-components
          operator: Exists
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: Directory
          name: ssl-certs
        - configMap:
            defaultMode: 420
            name: metadata-agent-config
          name: metadata-agent-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: mongo
      meta.helm.sh/release-namespace: mongodb
    creationTimestamp: "2021-01-26T06:32:15Z"
    generation: 1
    labels:
      app: mongodb
      chart: mongodb-7.8.10
      pod-template-hash: 87b788c88
      release: mongo
    name: mongo-mongodb-87b788c88
    namespace: mongodb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mongo-mongodb
      uid: 4b00d558-77cd-41e2-8313-0fc4275044df
    resourceVersion: "2222771"
    selfLink: /apis/apps/v1/namespaces/mongodb/replicasets/mongo-mongodb-87b788c88
    uid: 45fdab8c-65f4-4f50-a350-31368ab68a5d
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mongodb
        pod-template-hash: 87b788c88
        release: mongo
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mongodb
          chart: mongodb-7.8.10
          pod-template-hash: 87b788c88
          release: mongo
      spec:
        containers:
        - env:
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password
                name: mongo-mongodb
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: "0"
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: "no"
          - name: MONGODB_ENABLE_IPV6
            value: "no"
          - name: MONGODB_ENABLE_DIRECTORY_PER_DB
            value: "no"
          image: docker.io/bitnami/mongodb:4.2.4-debian-10-r0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - mongo
              - --eval
              - db.adminCommand('ping')
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: mongo-mongodb
          ports:
          - containerPort: 27017
            name: mongodb
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - mongo
              - --eval
              - db.adminCommand('ping')
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        terminationGracePeriodSeconds: 30
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mongo-mongodb
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    creationTimestamp: "2021-01-30T19:39:42Z"
    generation: 3
    labels:
      app: myapp
      type: front-end
    name: myapp-rs
    namespace: rc
    resourceVersion: "4670259"
    selfLink: /apis/apps/v1/namespaces/rc/replicasets/myapp-rs
    uid: 02637291-8a0b-4f2f-ae2f-9774c4ca9e63
  spec:
    replicas: 2
    selector:
      matchLabels:
        type: front-end
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: my-app
          type: front-end
        name: myapp-pod
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - image: redis
          imagePullPolicy: Always
          name: backend-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 3
    readyReplicas: 2
    replicas: 2
- apiVersion: autoscaling/v1
  kind: HorizontalPodAutoscaler
  metadata:
    annotations:
      autoscaling.alpha.kubernetes.io/conditions: '[{"type":"AbleToScale","status":"True","lastTransitionTime":"2021-01-21T05:24:16Z","reason":"ReadyForNewScale","message":"recommended
        size matches current size"},{"type":"ScalingActive","status":"True","lastTransitionTime":"2021-01-21T05:24:52Z","reason":"ValidMetricFound","message":"the
        HPA was able to successfully calculate a replica count from cpu resource utilization
        (percentage of request)"},{"type":"ScalingLimited","status":"False","lastTransitionTime":"2021-01-21T05:30:09Z","reason":"DesiredWithinRange","message":"the
        desired count is within the acceptable range"}]'
      autoscaling.alpha.kubernetes.io/current-metrics: '[{"type":"Resource","resource":{"name":"cpu","currentAverageUtilization":2,"currentAverageValue":"2m"}}]'
    creationTimestamp: "2021-01-21T05:23:57Z"
    labels:
      app: carts
    name: carts-hpa-sgna
    namespace: default
    resourceVersion: "8421724"
    selfLink: /apis/autoscaling/v1/namespaces/default/horizontalpodautoscalers/carts-hpa-sgna
    uid: a5ec5d6d-a6fb-408c-bf81-bd1f7c0eea5d
  spec:
    maxReplicas: 5
    minReplicas: 1
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: carts
    targetCPUUtilizationPercentage: 80
  status:
    currentCPUUtilizationPercentage: 2
    currentReplicas: 1
    desiredReplicas: 1
    lastScaleTime: "2021-01-21T05:53:01Z"
- apiVersion: autoscaling/v1
  kind: HorizontalPodAutoscaler
  metadata:
    annotations:
      autoscaling.alpha.kubernetes.io/conditions: '[{"type":"AbleToScale","status":"True","lastTransitionTime":"2021-01-21T05:08:45Z","reason":"ReadyForNewScale","message":"recommended
        size matches current size"},{"type":"ScalingActive","status":"True","lastTransitionTime":"2021-01-21T05:09:22Z","reason":"ValidMetricFound","message":"the
        HPA was able to successfully calculate a replica count from cpu resource utilization
        (percentage of request)"},{"type":"ScalingLimited","status":"False","lastTransitionTime":"2021-01-21T05:09:22Z","reason":"DesiredWithinRange","message":"the
        desired count is within the acceptable range"}]'
      autoscaling.alpha.kubernetes.io/current-metrics: '[{"type":"Resource","resource":{"name":"cpu","currentAverageUtilization":1,"currentAverageValue":"1m"}}]'
    creationTimestamp: "2021-01-21T05:08:28Z"
    labels:
      app: catalogue-db
    name: catalogue-db-hpa-vtql
    namespace: default
    resourceVersion: "6226764"
    selfLink: /apis/autoscaling/v1/namespaces/default/horizontalpodautoscalers/catalogue-db-hpa-vtql
    uid: d591131d-4d61-4275-b097-08eeaa3d4999
  spec:
    maxReplicas: 5
    minReplicas: 1
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: catalogue-db
    targetCPUUtilizationPercentage: 80
  status:
    currentCPUUtilizationPercentage: 1
    currentReplicas: 1
    desiredReplicas: 1
    lastScaleTime: "2021-01-21T05:13:47Z"
- apiVersion: autoscaling/v1
  kind: HorizontalPodAutoscaler
  metadata:
    annotations:
      autoscaling.alpha.kubernetes.io/conditions: '[{"type":"AbleToScale","status":"True","lastTransitionTime":"2021-01-21T05:11:45Z","reason":"ReadyForNewScale","message":"recommended
        size matches current size"},{"type":"ScalingActive","status":"True","lastTransitionTime":"2021-01-21T05:12:45Z","reason":"ValidMetricFound","message":"the
        HPA was able to successfully calculate a replica count from cpu resource utilization
        (percentage of request)"},{"type":"ScalingLimited","status":"False","lastTransitionTime":"2021-01-21T05:12:45Z","reason":"DesiredWithinRange","message":"the
        desired count is within the acceptable range"}]'
      autoscaling.alpha.kubernetes.io/current-metrics: '[{"type":"Resource","resource":{"name":"cpu","currentAverageUtilization":1,"currentAverageValue":"1m"}}]'
    creationTimestamp: "2021-01-21T05:11:30Z"
    labels:
      app: catalogue
    name: catalogue-hpa-olwf
    namespace: default
    resourceVersion: "6267174"
    selfLink: /apis/autoscaling/v1/namespaces/default/horizontalpodautoscalers/catalogue-hpa-olwf
    uid: 3c1483c0-896d-480a-94d8-43061762c654
  spec:
    maxReplicas: 5
    minReplicas: 1
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: catalogue
    targetCPUUtilizationPercentage: 80
  status:
    currentCPUUtilizationPercentage: 1
    currentReplicas: 1
    desiredReplicas: 1
    lastScaleTime: "2021-01-21T05:29:47Z"
- apiVersion: autoscaling/v1
  kind: HorizontalPodAutoscaler
  metadata:
    annotations:
      autoscaling.alpha.kubernetes.io/conditions: '[{"type":"AbleToScale","status":"True","lastTransitionTime":"2021-01-21T01:37:22Z","reason":"ReadyForNewScale","message":"recommended
        size matches current size"},{"type":"ScalingActive","status":"True","lastTransitionTime":"2021-01-21T01:37:47Z","reason":"ValidMetricFound","message":"the
        HPA was able to successfully calculate a replica count from cpu resource utilization
        (percentage of request)"},{"type":"ScalingLimited","status":"False","lastTransitionTime":"2021-01-21T05:48:15Z","reason":"DesiredWithinRange","message":"the
        desired count is within the acceptable range"}]'
      autoscaling.alpha.kubernetes.io/current-metrics: '[{"type":"Resource","resource":{"name":"cpu","currentAverageUtilization":1,"currentAverageValue":"1m"}}]'
    creationTimestamp: "2021-01-21T01:37:00Z"
    labels:
      app: frontend
    name: frontend-hpa-jrfg
    namespace: default
    resourceVersion: "8417315"
    selfLink: /apis/autoscaling/v1/namespaces/default/horizontalpodautoscalers/frontend-hpa-jrfg
    uid: 61208927-e43a-4d56-9f7f-41b90b13bdc8
  spec:
    maxReplicas: 5
    minReplicas: 1
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: frontend
    targetCPUUtilizationPercentage: 80
  status:
    currentCPUUtilizationPercentage: 1
    currentReplicas: 1
    desiredReplicas: 1
    lastScaleTime: "2021-01-24T18:28:12Z"
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
